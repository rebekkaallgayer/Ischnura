# read 'range' output into a data frame
range_df <- readRange(s, dirpath)
# plot trajectories of all individual runs and overlay with mean:
par(mfrow=c(1,2))
plotAbundance(range_df)
plotOccupancy(range_df)
# read population output file into a data frame
pop_df <- readPop(s, dirpath)
# Make stack of different raster layers for each year and for only one repetition (Rep==0):
pop_wide_rep0 <- reshape(subset(pop_df,Rep==0)[,c('Year','x','y','NInd')], timevar='Year', v.names=c('NInd'), idvar=c('x','y'), direction='wide')
##because for some reason RangeShiftR sets xllcorner and yllcorner coordinates to 0,0
pop_wide_rep0$x <- pop_wide_rep0$x+ext(Landmap)[1]
pop_wide_rep0$y <- pop_wide_rep0$y+ext(Landmap)[3]
r_years_rep0 <- terra::rast(pop_wide_rep0, extent=ext(Landmap), type="xyz")
plot(r_years_rep0[["NInd.20"]])
# Overlay with Sweden mask
#r_years_rep0 <- terra::extend(r_years_rep0, Landmap, "out")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Landmap)
# Map abundance
par(mfrow=c(1,2))
plot(r_years_rep0[['NInd.0']], col=c('grey',rev(inferno(150))), axes=F)
plot(as.polygons(SpDist, dissolve=F), border='red', col=NA, add=T)
plot(r_years_rep0[['NInd.20']], col=c('grey',rev(inferno(150))), axes=F)
plot(as.polygons(SpDist, dissolve=F), border='red', col=NA, add=T)
ymax(Landmap)
ymin(Landmap)
y=1
#####################
##cutting off the south of sweden
#####################
years<- seq(2013,2023,1)
#for sweden
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km.tif", sep=""))
# Define extent to exclude rows (e.g., remove rows 1-2)
new_extent <- ext(hab_yr, ymin=6450000, ymax=ymax(hab_yr))  # Adjust ymin/ymax as needed
?ext
# Define extent to exclude rows (e.g., remove rows 1-2)
new_extent <- ext(xmin=xmin(hab_yr), xmax=xmax(hab_yr), ymin=6450000, ymax=ymax(hab_yr))  # Adjust ymin/ymax as needed
# Example raster
r <- rast(nrows=10, ncols=10, vals=1:100)
# Define extent to exclude rows (e.g., remove rows 1-2)
new_extent <- ext(r, ymin=3, ymax=nrow(r))  # Adjust ymin/ymax as needed
?crop
# Define extent to exclude rows (e.g., remove rows 1-2)
new_extent <- ext(xmin(hab_yr), xmax(hab_yr), 6450000, ymax(hab_yr))  # Adjust ymin/ymax as needed
cropped_raster <- crop(hab_yr, new_extent)
plot(cropped_raster)
cropped_raster
#####################
##cutting off the south of sweden
#####################
years<- seq(2013,2023,1)
for(y in 1:length(years)){
print(years[y])
#for sweden
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km.tif", sep=""))
# Define extent to exclude rows (e.g., remove ~300 rows)
new_extent <- ext(xmin(hab_yr), xmax(hab_yr), 6450000, ymax(hab_yr))  # Adjust ymin/ymax as needed
cropped_raster <- crop(hab_yr, new_extent)
writeRaster(cropped_raster, paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""), overwrite=T)
writeRaster(cropped_raster, paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.asc",
sep=""), NAflag=-99, overwrite=TRUE)
}
hab_base<- rast("data/RS_swe/hab_type_2013_1km_crop.tif")
##Sweden
spdist_base<- rast("data/RS_swe/initial_dist_1km.tif")
spdist_crop<- crop(spdist_base, hab_base)
plot(spdist_crop)
spdist_crop
hab_base
writeRaster(spdist_crop, "data/RS_swe/initial_dist_1km_crop.tif", overwrite=T)
writeRaster(spdist_crop, "data/RS_swe/initial_dist_1km_crop.asc", NAflag=-99, overwrite=TRUE)
######for real landscape#######
#set land parameters with imported landscape, Sweden 2013
#NB: I have had issues with the first value in these rasters being decimals
# eg 0.0 instead of 0 and RangeShiftR doesn't like that!
#make sure all files you'll be using have only integers in them
Landmap <- terra::rast(paste0(dirpath, "Inputs/hab_type_2013_1km_crop.asc"))
SpDist <- terra::rast(paste0(dirpath, "Inputs/initial_dist_1km_crop.asc"))
values(SpDist)[values(SpDist) < 1] <- NA
#check that spdist points are in suitable habitat
sp_df <- terra::as.data.frame(SpDist, xy = TRUE, na.rm = TRUE)
e <- extract(Landmap, sp_df[,1:2])
# carrying capacities and landscape parameter object
carrycap <- c(0, 1, 2.5, 4.5)
land <- ImportedLandscape(LandscapeFile = "hab_type_2013_1km_crop.asc",
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
#demography
demo <- Demography(Rmax = 2.2, ReproductionType = 1, PropMales = 0.5)
#exploring a dispersal kernel with a long tail
# maybe want a double kernel
plotProbs(DispersalKernel(Distances = matrix(c(1500, 10000,.9),nrow=1), DoubleKernel=T))
disp <-  Dispersal(Emigration = Emigration(EmigProb = 0.8), #, UseFullKern=T, only if densdep=F!
Transfer   = DispersalKernel(Distances = matrix(c(1500, 10000,.9),nrow=1), DoubleKernel=T),
Settlement = Settlement() )
#set initialisation
init<- Initialise(InitType= 1, #species distribution
SpType =0, # all cells in species distribution
InitDens=1 #at half K
)
#set up sim
sim_1 <- Simulation(Simulation = 1,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#set up sim
sim_1 <- Simulation(Simulation = 1,
Replicates = 1,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#set up sim
sim_1 <- Simulation(Simulation = 1,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#run sim
#s <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_0, init = init)
s <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_1, init = init)
RunRS(s, dirpath)
land <- ImportedLandscape(LandscapeFile = "hab_type_2013_1km_crop.asc",
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
#demography
demo <- Demography(Rmax = 2.2, ReproductionType = 1, PropMales = 0.5)
#set up sim
sim_1 <- Simulation(Simulation = 1,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#run sim
#s <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_0, init = init)
s <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_1, init = init)
RunRS(s, dirpath)
#plot results
# read 'range' output into a data frame
range_df <- readRange(s, dirpath)
# plot trajectories of all individual runs and overlay with mean:
par(mfrow=c(1,2))
plotAbundance(range_df)
plotOccupancy(range_df)
# read population output file into a data frame
pop_df <- readPop(s, dirpath)
# Make stack of different raster layers for each year and for only one repetition (Rep==0):
pop_wide_rep0 <- reshape(subset(pop_df,Rep==0)[,c('Year','x','y','NInd')], timevar='Year', v.names=c('NInd'), idvar=c('x','y'), direction='wide')
##because for some reason RangeShiftR sets xllcorner and yllcorner coordinates to 0,0
pop_wide_rep0$x <- pop_wide_rep0$x+ext(Landmap)[1]
pop_wide_rep0$y <- pop_wide_rep0$y+ext(Landmap)[3]
r_years_rep0 <- terra::rast(pop_wide_rep0, extent=ext(Landmap), type="xyz")
plot(r_years_rep0[["NInd.20"]])
dev.off()
# Overlay with Sweden mask
#r_years_rep0 <- terra::extend(r_years_rep0, Landmap, "out")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Landmap)
# Map abundance
par(mfrow=c(1,2))
plot(r_years_rep0[['NInd.0']], col=c('grey',rev(inferno(150))), axes=F)
plot(r_years_rep0[['NInd.20']], col=c('grey',rev(inferno(150))), axes=F)
#store path to working directory
dirpath = "Simulation2/"
dyn_lands<- list.files(past0(dirpath,"Inputs"), "^[h]")
dyn_lands<- list.files(paste0(dirpath,"Inputs"), "^[h]")
dyn_lands
land <- ImportedLandscape(LandscapeFile = dyn_lands,
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
?ImportedLandscape
dyn_years<- seq(1,12,1)
dyn_years<- seq(1,11,1)
land <- ImportedLandscape(LandscapeFile = dyn_lands,
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
DynamicLandYears = seq(0,10,1),
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
#demography
demo <- Demography(Rmax = 2.2, ReproductionType = 1, PropMales = 0.5)
#exploring a dispersal kernel with a long tail
# maybe want a double kernel
disp <-  Dispersal(Emigration = Emigration(EmigProb = 0.8), #, UseFullKern=T, only if densdep=F!
Transfer   = DispersalKernel(Distances = matrix(c(1500, 10000,.9),nrow=1), DoubleKernel=T),
Settlement = Settlement() )
#set initialisation
init<- Initialise(InitType= 1, #species distribution
SpType =0, # all cells in species distribution
InitDens=1 #at half K
)
#set up sim
sim_2 <- Simulation(Simulation = 2,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#run sim
s2 <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_2, init = init)
s2
validateRSparams(s2)
RunRS(s2, dirpath)
RunRS(s2, dirpath)
land_test<- ImportedLandscape(LandscapeFile = "hab_type_2020_1km_crop.asc",
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
sim_3 <- Simulation(Simulation = 3,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
s3 <- RSsim(land = land_test, demog = demo, dispersal = disp, simul = sim_3, init = init)
RunRS(s3, dirpath)
land_test<- ImportedLandscape(LandscapeFile = "hab_type_2019_1km_crop.asc",
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
sim_3 <- Simulation(Simulation = 3,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
s3 <- RSsim(land = land_test, demog = demo, dispersal = disp, simul = sim_3, init = init)
RunRS(s3, dirpath)
hab_1<- rast("data/RS_swe/hab_type_2013_1km_crop.tif")
# Identify cell numbers with NA values
na_cells <- which(is.na(values(hab_1)))
head(na_cells)
y=2
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
# Identify cell numbers with NA values
na_cells_yr <- which(is.na(values(hab_yr)))
differences <- which(na_cells != na_cells_yr)
y=7
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
years[y]
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
# Identify cell numbers with NA values
na_cells_yr <- which(is.na(values(hab_yr)))
differences <- which(na_cells != na_cells_yr)
#make sure those cells are NA in all years
hab_yr[na_cells]<- NA
na_cells <- which(is.na(values(hab_yr)))
# Identify cell numbers with NA values
na_cells <- which(is.na(values(hab_1)))
na_cells_yr <- which(is.na(values(hab_yr)))
writeRaster(hab_yr, paste("data/RS_swe/hab_type_",
years[y], "_1km_cropNA.tif", sep=""),
datatype="INT2S", overwrite=T)
writeRaster(hab_yr, paste("data/RS_swe/hab_type_",
years[y], "_1km_cropNA.asc",
sep=""), NAflag=-99,
datatype="INT2S", overwrite=TRUE)
for(y in 2:length(years)){
print(years[y])
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
#make sure those cells are NA in all years
hab_yr[na_cells]<- NA
#na_cells_yr <- which(is.na(values(hab_yr)))
writeRaster(hab_yr, paste("data/RS_swe/hab_type_",
years[y], "_1km_cropNA.tif", sep=""),
datatype="INT2S", overwrite=T)
writeRaster(hab_yr, paste("data/RS_swe/hab_type_",
years[y], "_1km_cropNA.asc",
sep=""), NAflag=-99,
datatype="INT2S", overwrite=TRUE)
}
dyn_lands<- list.files(paste0(dirpath,"Inputs"), "*NA")
dyn_lands
land <- ImportedLandscape(LandscapeFile = dyn_lands,
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
DynamicLandYears = seq(0,10,1),
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
#demography
demo <- Demography(Rmax = 2.2, ReproductionType = 1, PropMales = 0.5)
#exploring a dispersal kernel with a long tail
# maybe want a double kernel
disp <-  Dispersal(Emigration = Emigration(EmigProb = 0.8), #, UseFullKern=T, only if densdep=F!
Transfer   = DispersalKernel(Distances = matrix(c(1500, 10000,.9),nrow=1), DoubleKernel=T),
Settlement = Settlement() )
#set initialisation
init<- Initialise(InitType= 1, #species distribution
SpType =0, # all cells in species distribution
InitDens=1 #at half K
)
#set up sim
sim_2 <- Simulation(Simulation = 2,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#run sim
s2 <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_2, init = init)
RunRS(s2, dirpath)
dyn_lands<- list.files(paste0(dirpath,"Inputs"), "*NA")[1,7]
dyn_lands<- list.files(paste0(dirpath,"Inputs"), "*NA")[c(1,7)]
land <- ImportedLandscape(LandscapeFile = dyn_lands,
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
DynamicLandYears = seq(0,2,1),
# DynamicLandYears = seq(0,10,1),
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
land <- ImportedLandscape(LandscapeFile = dyn_lands,
Resolution = 1000,
Nhabitats = 4,
K_or_DensDep = carrycap,
DynamicLandYears = seq(0,1,1),
# DynamicLandYears = seq(0,10,1),
SpDistFile = "initial_dist_1km_crop.asc",
SpDistResolution = 1000)
#set up sim
sim_2 <- Simulation(Simulation = 2,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#run sim
s2 <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_2, init = init)
RunRS(s2, dirpath)
?resample
?focal
#get rid of NAs
hab_1NA<- focal(hab_1,fun="modal", na.policy="only")
na_cellsNA <- which(is.na(values(hab_1_NA)))
na_cellsNA <- which(is.na(values(hab_1NA)))
plot(hab_1NA)
y=
7
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
hab_yrNA<- focal(hab_yr,fun="modal", na.policy="only")
na_cells_yr <- which(is.na(values(hab_yr)))
na_cells_yrNA <- which(is.na(values(hab_yrNA)))
#get rid of NAs
hab_1NA<- focal(hab_1,fun="modal", na.policy="only", na.rm=T)
plot(hab_1NA)
na_cellsNA <- which(is.na(values(hab_1NA)))
hab_yrNA<- focal(hab_yr,fun="modal", na.policy="only", na.rm=T)
na_cells_yr <- which(is.na(values(hab_yr)))
na_cells_yrNA <- which(is.na(values(hab_yrNA)))
?classify
?approximate
hab_2<- rast("data/RS_swe/hab_type_2014_1km_crop.tif")
na_cells2<- which(is.na(values(hab_2)))
for(y in 2:length(years)){
print(years[y])
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
# #make sure those cells are NA in all years
# hab_yr[na_cells]<- NA
# hab_yrNA<- focal(hab_yr,fun="modal", na.policy="only", na.rm=T)
na_cells_yr <- which(is.na(values(hab_yr)))
# na_cells_yrNA <- which(is.na(values(hab_yrNA)))
print(length(na_cells_yr))
# writeRaster(hab_yr, paste("data/RS_swe/hab_type_",
#                                   years[y], "_1km_cropNA.tif", sep=""),
#             datatype="INT2S", overwrite=T)
# writeRaster(hab_yr, paste("data/RS_swe/hab_type_",
#                                   years[y], "_1km_cropNA.asc",
#                                   sep=""), NAflag=-99,
#             datatype="INT2S", overwrite=TRUE)
}
hab_stack<- rast("data/RS_swe/hab_type_2013_1km_crop.tif")
hab_stack<- rast("data/RS_swe/hab_type_2019_1km_crop.tif")
years<- seq(2019,2023,1)
for(y in 2:length(years)){
print(years[y])
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
# #make sure those cells are NA in all years
# hab_yr[na_cells]<- NA
# hab_yrNA<- focal(hab_yr,fun="modal", na.policy="only", na.rm=T)
# na_cells_yr <- which(is.na(values(hab_yr)))
hab_stack<- c(hab_stack, hab_yr)
}
hab_yr_app<- approximate(hab_stack)
plot(hab_yr_app)
for(y in 1:length(years)){
na_cells_yr <- which(is.na(values(hab_stack[[y]])))
print(na_cells_yr)
}
hab_stack[[1]]
unique(values(hab_stack[[1]]))
for(y in 1:length(years)){
na_cells_yr <- which(is.na(values(hab_stack[[y]])))
print(length(na_cells_yr))
}
for(y in 1:length(years)){
na_cells_yr <- which(is.na(values(hab_yr_app[[y]])))
print(length(na_cells_yr))
}
hab_stack<- rast("data/RS_swe/hab_type_2019_1km_crop.tif")
for(y in 2:length(years)){
print(years[y])
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
# #make sure those cells are NA in all years
# hab_yr[na_cells]<- NA
# hab_yrNA<- focal(hab_yr,fun="modal", na.policy="only", na.rm=T)
# na_cells_yr <- which(is.na(values(hab_yr)))
hab_stack<- c(hab_stack, hab_yr)
}
for(y in 1:length(years)){
na_cells_yr <- which(is.na(values(hab_stack[[y]])))
print(length(na_cells_yr))
}
hab_yr_app<- approximate(hab_stack, "constant")
for(y in 1:length(years)){
na_cells_yr <- which(is.na(values(hab_yr_app[[y]])))
print(length(na_cells_yr))
}
hab_19<- rast("data/RS_swe/hab_type_2019_1km_crop.tif")
# Match NA cells in r2 to those in r1
hab_matched <- mask(hab_19, hab_1)
na_cells_19 <- which(is.na(values(hab_19)))
hab2_matched<- mask(hab_1, hab_19)
na_cells_mat <- which(is.na(values(hab_matched)))
na_cells_mat2 <- which(is.na(values(hab2_matched)))
par(mfrow=c(1,3))
plot(hab1)
plot(hab_1)
plot(hab_19)
plot(hab_matched)
plot(hab2_matched)
hab_13<- rast("data/RS_swe/hab_type_2013_1km_crop.tif")
hab_19<- rast("data/RS_swe/hab_type_2019_1km_crop.tif")
years<- seq(2013,2023,1)
y=1
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
hab_matched<- hab_yr
if(years[y]<2019){
hab_matched <- mask(hab_yr, hab_1)
}
na_cells_matched <- which(is.na(values(hab_matched)))
print(length(na_cells_matched))
hab_matched <- mask(hab_1, hab_yr)
na_cells_matched <- which(is.na(values(hab_matched)))
print(length(na_cells_matched))
hab_matched <- mask(hab_yr, hab_19)
na_cells_matched <- which(is.na(values(hab_matched)))
print(length(na_cells_matched))
y=7
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
hab_matched<- hab_yr
hab_matched <- mask(hab_yr, hab_13)
na_cells_matched <- which(is.na(values(hab_matched)))
print(length(na_cells_matched))
years<- seq(2013,2023,1)
hab_13<- rast("data/RS_swe/hab_type_2013_1km_crop.tif")
hab_19<- rast("data/RS_swe/hab_type_2019_1km_crop.tif")
for(y in 1:length(years)){
print(years[y])
hab_yr<- rast(paste("data/RS_swe/hab_type_",
years[y], "_1km_crop.tif", sep=""))
hab_matched<- hab_yr
if(years[y]<2019){
hab_matched <- mask(hab_yr, hab_19)
}
else{
hab_matched <- mask(hab_yr, hab_13)
}
na_cells_matched <- which(is.na(values(hab_matched)))
print(length(na_cells_matched))
writeRaster(hab_matched, paste("data/RS_swe/hab_type_",
years[y], "_1km_cropNA.tif", sep=""),
datatype="INT4S", overwrite=T)
writeRaster(hab_matched, paste("data/RS_swe/hab_type_",
years[y], "_1km_cropNA.asc",
sep=""), NAflag=-99,
datatype="INT4S",overwrite=TRUE)
}
