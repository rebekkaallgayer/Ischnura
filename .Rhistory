"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(500,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
# print(paste("fec is ", fec, sep=""))
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5, cex=0.8)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=5, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
legend(400,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
b<- 1/c(seq(500,1,-100),1)
cols<- c("red", "blue", "black", "green", "purple", "orange")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec*exp(-1*b[i]*Nt[j])
b<- 1/seq(500,1,-100)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=0.94
Nt<- seq(0,10000,100)
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=1
Nt<- seq(0,10000,100)
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(600,100000,100)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(600,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,100000,100)
b<- 1/500
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/10000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/15000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/20000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/50000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/1000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,1000000,1000)
b<- 1/5000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/7000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/6000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
300^2
rnorm(20, 0.075, 0.0075)
n_layers=9 #how many layer files do you have?
min_depth=0 #surface=0, otherwise which minimum depth to plot from
dint=10 #depth interval in metres
res=1500 #resolution in metres
min_x=428430 #this is the minimum x coordinate IN METRES!
min_y=6123500 #this is the minimum y coordinate IN METRES!
nr=245 #number of rows
nc=198 #number of columns
max_y=min_y+(res*nr)
max_x=min_x+(res*nc)
min_x
max_x
min_y
max_y
##################setting up RangeShiftR#################
setwd("Ischnura/")
library(Rcpp)
library(devtools)
library(Rdpack)
library(RangeShiftR)
library(terra)
library(RColorBrewer)
library(viridis)
library(grid)
library(gridExtra)
#Create a parameter master object with all the default settings and store it:
s <- RSsim()
#store path to working directory
dirpath = "RSR_map/"
######for real landscape#######
#set land parameters with imported landscape
Swedenmap <- terra::rast(paste0(dirpath, "Inputs/hab_ras.txt"))
SpDist <- terra::rast(paste0(dirpath, "Inputs/spd_ras.txt"))
values(SpDist)[values(SpDist) < 1] <- NA
# plot land cover map and highlight cells with initial species distribution - option 1:
plot(Swedenmap, col=brewer.pal(n = 6, name = "Spectral"), axes=F)
plot(as.polygons(SpDist, dissolve=F), add=T)
# plot land cover map and highlight cells with initial species distribution - option 2 with categorical legend:
Swedenmap.f <- as.factor(Swedenmap)
# add the land cover classes to the raster attribute table (RAT)
rat <- levels(Swedenmap.f)[[1]][-2]
rat[["landcover"]] <- c("Forest, not wetland", "Wetland", "Arable land", "Forest, wetland",
"Open land", "Artificial", "Inland water", "Marine")
levels(Swedenmap.f) <- rat
custom.pal <- c("#1A9850","#7AC5CD", "#D9EF8B","#91CF60",  "#FEE08B", "#777777", "#98F5FF", "#00008B")
plot(Swedenmap.f, col=custom.pal, axes=F)
plot(as.polygons(SpDist, dissolve=F), border='red', col=NA, add=T)
class(Swedenmap)
install.packages("exactextractr")
library(exactextractr)
?extract
#check that spdist points are in suitable habitat
sp_df <- terra::as.data.frame(SpDist, xy = TRUE, na.rm = TRUE)
View(sp_df)
e <- extract(Swedenmap, sp_df)
e <- extract(Swedenmap, sp_df[,1:2])
View(e)
SpDist <- terra::rast(paste0(dirpath, "Inputs/spd_ras.txt"))
values(SpDist)[values(SpDist) < 1] <- NA
#check that spdist points are in suitable habitat
sp_df <- terra::as.data.frame(SpDist, xy = TRUE, na.rm = TRUE)
e <- extract(Swedenmap, sp_df[,1:2])
# plot land cover map and highlight cells with initial species distribution - option 2 with categorical legend:
Swedenmap.f <- as.factor(Swedenmap)
# add the land cover classes to the raster attribute table (RAT)
rat <- levels(Swedenmap.f)[[1]][-2]
rat[["landcover"]] <- c("Forest, not wetland", "Wetland", "Arable land", "Forest, wetland",
"Open land", "Artificial", "Inland water", "Marine")
levels(Swedenmap.f) <- rat
custom.pal <- c("#1A9850","#7AC5CD", "#D9EF8B","#91CF60",  "#FEE08B", "#777777", "#98F5FF", "#00008B")
plot(Swedenmap.f, col=custom.pal, axes=F)
plot(as.polygons(SpDist, dissolve=F), border='red', col=NA, add=T)
# carrying capacitíes and landscape parameter object
carrycap <- c(0, 100, 0, 50, 0, 0, 150, 150)
land <- ImportedLandscape(LandscapeFile = "hab_ras.txt",
Resolution = 1000,
Nhabitats = 8,
K_or_DensDep = carrycap,
SpDistFile = "spd_ras.txt",
SpDistResolution = 1000)
#demography
demo <- Demography(Rmax = 2.2, ReproductionType = 1, PropMales = 0.5)
#exploring a dispersal kernel with a long tail
# maybe want a double kernel
plotProbs(DispersalKernel(Distances = matrix(c(1500, 10000,.9),nrow=1), DoubleKernel=T))
disp <-  Dispersal(Emigration = Emigration(EmigProb = 0.8), #, UseFullKern=T, only if densdep=F!
Transfer   = DispersalKernel(Distances = matrix(c(1500, 10000,.9),nrow=1), DoubleKernel=T),
Settlement = Settlement() )
#set initialisation
init<- Initialise(InitType= 1, #species distribution
SpType =0, # all cells in species distribution
InitDens=1 #at half K
)
#set up sim
sim_0 <- Simulation(Simulation = 0,
Replicates = 2,
Years = 20,
OutIntPop = 2,
OutIntOcc = 2,
OutIntRange = 2)
#run sim
s <- RSsim(land = land, demog = demo, dispersal = disp, simul = sim_0, init = init)
s
validateRSparams(s)
RunRS(s, dirpath)
#plot results
# read 'range' output into a data frame
range_df <- readRange(s, dirpath)
# plot trajectories of all individual runs and overlay with mean:
par(mfrow=c(1,2))
plotAbundance(range_df)
plotOccupancy(range_df)
# read population output file into a data frame
pop_df <- readPop(s, dirpath)
# Not all years have the same number of cells, since only cells that had ever established a population are recorded.
# For later stacking, we need a common extent. This is a quick & dirty solution:
ext <- terra::ext(c(min(pop_df$x)-500,max(pop_df$x)+500,min(pop_df$y)-500,max(pop_df$y)+500))
# Make stack of different raster layers for each year and for only one repetition (Rep==0):
pop_wide_rep0 <- reshape(subset(pop_df,Rep==0)[,c('Year','x','y','NInd')], timevar='Year', v.names=c('NInd'), idvar=c('x','y'), direction='wide')
r_years_rep0 <- terra::rast(pop_wide_rep0, type="xyz")
# Overlay with UK mask
r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap)
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
ext(r_years_rep0)
ext(Swedenmap)
?extend
?rast
r_years_rep0 <- terra::rast(pop_wide_rep0, extent=ext, type="xyz")
# Overlay with UK mask
r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap)
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
ext(r_years_rep0)
ext(Swedenmap)
r_years_rep0 <- terra::rast(pop_wide_rep0, extent=ext(Swedenmap), type="xyz")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
ext(r_years_rep0)
ext(Swedenmap)
# Overlay with UK mask
r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap)
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
# Overlay with UK mask
r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap, "near")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
# Overlay with UK mask
r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap, "in")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
# Overlay with UK mask
r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap, "out")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
# Make stack of different raster layers for each year and for only one repetition (Rep==0):
pop_wide_rep0 <- reshape(subset(pop_df,Rep==0)[,c('Year','x','y','NInd')], timevar='Year', v.names=c('NInd'), idvar=c('x','y'), direction='wide')
r_years_rep0 <- terra::rast(pop_wide_rep0, extent=ext(Swedenmap), type="xyz")
ext(r_years_rep0
)
ext(Swedenmap)
ext(Swedenmap)<- ext(r_years_rep0)
ext(Swedenmap)
#r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap, "out")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
# Map abundance
plot(r_years_rep0[['NInd.90']], col=c('grey',rev(inferno(150))), axes=F)
# Map abundance
plot(r_years_rep0[['NInd.20']], col=c('grey',rev(inferno(150))), axes=F)
View(r_years_rep0)
View(pop_df)
View(pop_wide_rep0)
plot(as.polygons(SpDist, dissolve=F), border='red', col=NA, add=T)
values(r_years_rep0[['NInd.20']])
values(r_years_rep0[['NInd.20']], na.omit=T)
names(r_years_rep0)
#r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap, "out")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
# Make stack of different raster layers for each year and for only one repetition (Rep==0):
pop_wide_rep0 <- reshape(subset(pop_df,Rep==0)[,c('Year','x','y','NInd')], timevar='Year', v.names=c('NInd'), idvar=c('x','y'), direction='wide')
r_years_rep0 <- terra::rast(pop_wide_rep0, extent=ext(Swedenmap), type="xyz")
# Overlay with Sweden mask
#need to get rid of a row/col or two from Sweden
ext(Swedenmap)<- ext(r_years_rep0)
#r_years_rep0 <- terra::extend(r_years_rep0, Swedenmap, "out")
values(r_years_rep0)[is.na(values(r_years_rep0))] <- 0
r_years_rep0 <- terra::mask(r_years_rep0, Swedenmap)
# Map abundance
plot(r_years_rep0[['NInd.20']], col=c('grey',rev(inferno(150))), axes=F)
