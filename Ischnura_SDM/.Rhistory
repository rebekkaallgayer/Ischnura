print(years[y])
chelsa_yr<- rast(paste("D:/Post_doc/Ischnura_SDM/CHELSA/chelsa_Biovars_", years[y], "_extv3.tif", sep=""))
chelsa_fenno<- subset(crop(chelsa_yr, Fenno),c(1,2,8,10))
crs(chelsa_fenno)<- crs(fenno_coast)
chelsa_layers<- terra::resample(chelsa_fenno, fenno_coast)
chelsa_layers<- mask(chelsa_layers, fenno_coast)
#make extents match
ext(chelsa_layers)<- ext(fenno_coast)
fenno_layers<- c(chelsa_layers,fenno_elev, fenno_land, fenno_water, fenno_coast)
#create stack
names(fenno_layers)<- c("Temp", "Diurnal_range", "Temp_wet", "Temp_warm", "Elevation", "Land_cover",
"Perc_water", "Dist_coast")
#write raster
writeRaster(fenno_layers, paste("data/final_fenno/",years[y], "_layers.tif", sep=""), overwrite=T)
rm(chelsa_yr)
gc()
}
#creating the environmental raster stack for each year
for(y in 6:13){
print(years[y])
chelsa_yr<- rast(paste("D:/Post_doc/Ischnura_SDM/CHELSA/chelsa_Biovars_", years[y], "_extv3.tif", sep=""))
chelsa_fenno<- subset(crop(chelsa_yr, Fenno),c(1,2,8,10))
crs(chelsa_fenno)<- crs(fenno_coast)
chelsa_layers<- terra::resample(chelsa_fenno, fenno_coast)
chelsa_layers<- mask(chelsa_layers, fenno_coast)
#make extents match
ext(chelsa_layers)<- ext(fenno_coast)
fenno_layers<- c(chelsa_layers,fenno_elev, fenno_land, fenno_water, fenno_coast)
#create stack
names(fenno_layers)<- c("Temp", "Diurnal_range", "Temp_wet", "Temp_warm", "Elevation", "Land_cover",
"Perc_water", "Dist_coast")
#write raster
writeRaster(fenno_layers, paste("data/final_fenno/",years[y], "_layers.tif", sep=""), overwrite=T)
rm(chelsa_yr)
gc()
}
#creating the environmental raster stack for each year
for(y in 14:19){
print(years[y])
chelsa_yr<- rast(paste("D:/Post_doc/Ischnura_SDM/CHELSA/chelsa_Biovars_", years[y], "_extv3.tif", sep=""))
chelsa_fenno<- subset(crop(chelsa_yr, Fenno),c(1,2,8,10))
crs(chelsa_fenno)<- crs(fenno_coast)
chelsa_layers<- terra::resample(chelsa_fenno, fenno_coast)
chelsa_layers<- mask(chelsa_layers, fenno_coast)
#make extents match
ext(chelsa_layers)<- ext(fenno_coast)
fenno_layers<- c(chelsa_layers,fenno_elev, fenno_land, fenno_water, fenno_coast)
#create stack
names(fenno_layers)<- c("Temp", "Diurnal_range", "Temp_wet", "Temp_warm", "Elevation", "Land_cover",
"Perc_water", "Dist_coast")
#write raster
writeRaster(fenno_layers, paste("data/final_fenno/",years[y], "_layers.tif", sep=""), overwrite=T)
rm(chelsa_yr)
gc()
}
#get the points for 2000-2022
isch_dat <- read.table('data/Ischnura_elegans_2022_10_26.csv', header=T, sep=',')
isch_2000s<- isch_dat[(isch_dat$year>=2000)&(!is.na(isch_dat$year)),]
xy_2000s<- isch_2000s[,c(5,4, 10,12)]
xy_crop<- xy_2000s[,1:2]
############################
#specific year for env variables
years<- sort(unique(xy_2000s$year))
yr_dat<- xy_2000s[xy_2000s$year==years[1],]
yr_vect<- vect(yr_dat[,1:2], geom=c("longitude", "latitude"), crs=crs(fenno_coast))
env_layers<- rast("data/final_fenno/2000_layers.tif")
env_ext<- terra::extract(env_layers, yr_vect, xy=T, cells=T)[,c(10:12, 2:9)]
#env_ext<- terra::extract(env_layers, yr_vect)[,-1]
env_ext<- env_ext[complete.cases(env_ext), ]
env_ext<- cbind(occ=rep(1,nrow(env_ext)), year=rep(2000,nrow(env_ext)),env_ext)
bg_ext<- sdm::background(env_layers, 100, "gRandom" )#[,-c(1:2)]
#yr_bg$cell<- cellFromXY(env_layers, as.matrix(cbind(yr_bg$x,yr_bg$y)))
bg_ext<- cbind(occ=rep(0,nrow(bg_ext)),year=rep(2000,nrow(bg_ext)),
cell=cellFromXY(env_layers, as.matrix(cbind(bg_ext$x,bg_ext$y))), bg_ext )
for(y in 2:length(years)){
print(years[y])
yr_dat<- xy_2000s[xy_2000s$year==years[y],] #get the position data
yr_vect<- vect(yr_dat[,1:2], geom=c("longitude", "latitude"), crs=crs(fenno_coast))
yr_env<- rast(paste("data/total_timeseries/", years[y], "_layers.tif", sep=""))
yr_ext<- terra::extract(yr_env, yr_vect, xy=T, cells=T)[,c(10:12, 2:9)]
yr_ext<- yr_ext[complete.cases(yr_ext), ]
yr_ext<- cbind(occ=rep(1,nrow(yr_ext)), year=rep(years[y],nrow(yr_ext)), yr_ext)
yr_bg<- sdm::background(yr_env, 100, "gRandom" )#[,-c(1:2)]
yr_bg<- cbind(occ=rep(0,nrow(yr_bg)),year=rep(years[y],nrow(yr_bg)),
cell=cellFromXY(yr_env, as.matrix(cbind(yr_bg$x,yr_bg$y))),yr_bg )
env_ext<- rbind(env_ext, yr_ext)
bg_ext<- rbind(bg_ext, yr_bg)
rm(yr_env)
gc() #garbage collector
}
y
for(y in 20:length(years)){
print(years[y])
yr_dat<- xy_2000s[xy_2000s$year==years[y],] #get the position data
yr_vect<- vect(yr_dat[,1:2], geom=c("longitude", "latitude"), crs=crs(fenno_coast))
yr_env<- rast(paste("data/total_timeseries/", years[y], "_layers.tif", sep=""))
yr_ext<- terra::extract(yr_env, yr_vect, xy=T, cells=T)[,c(10:12, 2:9)]
yr_ext<- yr_ext[complete.cases(yr_ext), ]
yr_ext<- cbind(occ=rep(1,nrow(yr_ext)), year=rep(years[y],nrow(yr_ext)), yr_ext)
yr_bg<- sdm::background(yr_env, 100, "gRandom" )#[,-c(1:2)]
yr_bg<- cbind(occ=rep(0,nrow(yr_bg)),year=rep(years[y],nrow(yr_bg)),
cell=cellFromXY(yr_env, as.matrix(cbind(yr_bg$x,yr_bg$y))),yr_bg )
env_ext<- rbind(env_ext, yr_ext)
bg_ext<- rbind(bg_ext, yr_bg)
rm(yr_env)
gc() #garbage collector
}
write.table(env_ext, "data/total_timeseries/dynamic_pres_dataset.txt", quote=F, row.names=F)
write.table(bg_ext, "data/total_timeseries/dynamic_bg_dataset.txt", quote=F, row.names=F)
#spatial autocorrelation : get rid of duplicates
env_ext_dup<- env_ext[!duplicated(env_ext[c('cell')]), ]
#combine presence and pseudo-absence
all_data<- rbind(env_ext_dup, bg_ext)
##split for train and test
train_i <- sample(seq_len(nrow(all_data)), size=round(0.7*nrow(all_data)))
# Then, we can subset the training and testing data
isch_train <- all_data[train_i,]
isch_test <- all_data[-train_i,]
write.table(isch_train, "data/total_timeseries/dynamic_train.txt", quote=F, row.names=F)
write.table(isch_test, "data/total_timeseries/dynamic_test.txt", quote=F, row.names=F)
#read in env data
terr_cls<- terrain.colors(100, rev=T)
#this is all the presence points from the entire dataset, 2000-2018
ipts_train<- vect(isch_train, geom=c("x", "y"), crs=crs(fenno_coast))
ipts_train$species=1
#~. means it takes species column and considers the rest as predictors, don't need to individually specify
train_df<- isch_train[,-c(2,3)]
test_df<- isch_test[,-c(2,3)]
d<- sdmData(occ~.+ coords(x+y), train=train_df, test=test_df)
write.sdm(d, filename='data/total_timeseries/dynamic_fenno_d', overwrite=T)
m <- sdm(occ~.+ coords(x+y), d, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
write.sdm(m, filename='data/total_timeseries/dynamic_fenno_sdm', overwrite=T)
#this is the raster stack of the mean of 2000-2013!
#mean_layers<- rast("data/final_fenno/static/fenno_layers.tif")
#this is the data from 2013 only
layers_2013<- rast("data/total_timeseries/2013_layers.tif")
layers_2022<- rast("data/total_timeseries/2022_layers.tif")
# p1 <- predict(m, mean_layers,filename='data/final_fenno/dynamic_predict_mean.img', overwrite=T)
# p1<- rast("data/final_fenno/dynamic_predict_mean.img")
# plot(p1, col=terr_cls)
p13 <- predict(m, layers_2013,filename='data/total_timeseries/dynamic_predict_2013.img', overwrite=T)
View(isch_train)
plot(p13, col=terr_cls)
m
p22 <- predict(m, layers_2022,filename='data/total_timeseries/dynamic_predict_2022.img', overwrite=T)
#but if you have already run the predict() as above, you can use the outputs
# en1 <- ensemble(m, p1, filename='data/final_fenno/ensemble_dynamic.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
# en1<- rast("data/ensemble_dynamic.img")
# names(en1)<- "ensemble_weighted"
en13 <- ensemble(m, p13, filename='data/total_timeseries/ensemble_dynamic_2013.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
en22 <- ensemble(m, p22, filename='data/total_timeseries/ensemble_dynamic_2022.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
names(en13)<- "ensemble_weighted"
names(en22)<- "ensemble_weighted"
# plot(en1, col=terr_cls)
par(mfrow=c(1,2))
plot(en13, col=terr_cls)
plot(en22, col=terr_cls)
#-----------
ch <- en22 - en13
cl2 <- colorRampPalette(c('red','orange','yellow','gray','green','blue'))
plot(ch,col=cl2(200))
plot(ch,col=cl2(100))
plot(ch,col=cl2(50))
levelplot(ch,par.settings=RdBuTheme())
library(rasterVis)
install.packages("rasterVis")
library(rasterVis)
levelplot(ch,par.settings=RdBuTheme())
?levelplot
?rasterTheme
levelplot(ch,par.settings=viridisTheme())
ch_0<- ch[is.na(ch)]<- NA
levelplot(ch_0,par.settings=viridisTheme())
ch_0<- ch
ch_0[is.na(ch_0)]<- NA
levelplot(ch_0,par.settings=viridisTheme())
ch_0[ch_0==0]<- NA
levelplot(ch_0,par.settings=viridisTheme())
levelplot(ch_0,par.settings=viridisTheme(), margin=F)
levelplot(ch,par.settings=BTCTheme())
levelplot(ch,par.settings=GrTheme())
levelplot(ch,par.settings=PuOrTheme())
levelplot(ch,par.settings=magmaTheme())
levelplot(ch,par.settings=infernoTheme())
levelplot(ch,par.settings=plasmaTheme())
levelplot(ch,par.settings=RdBuTheme())
plot(ch_0)
plot(ch,col=cl2(200))
plot(en13, col=terr_cls)
plot(en22, col=terr_cls)
# plot(en1, col=terr_cls)
par(mfrow=c(1,2))
plot(en13, col=terr_cls, main="2013")
plot(en22, col=terr_cls, main="2022")
levelplot(ch,par.settings=RdBuTheme(), margin=F)
levelplot(ch,par.settings=viridisTheme(), margin=F)
plot(ch,col=cl2(200))
par(mfrow=c(1,1))
plot(ch,col=cl2(200))
swe_water<- rast("data/perc_cover_freshwater.tif")
# Fenno<- vect("data/Fenno.gpkg")
# fenno_proj<- terra::project(Fenno,"EPSG:3006")
# plot(Fenno)
# plot(fenno_proj)
SWE<- readRDS("data/gadm/gadm41_SWE_0_pk.rds")
swe_proj<- terra::project(SWE,"EPSG:3006")
fenno_elev<- rast("data/final_fenno/elev_Fenno_ll.tif")
#plot(clim_fenno, col=terr_cls)
clim_proj<- terra::project(fenno_elev, "EPSG:3006") #roughly 500x500km
swe_blank<- crop(clim_proj, swe_proj)
swe_blank[!is.na(swe_blank)]<-0
swe_water<- swe_blank
swe_water<- rast("data/perc_cover_freshwater.tif")
swe_filled<- swe_water+swe_blank
swe_blank
swe_water
swe_blank<- crop(clim_proj, swe_proj)
swe_blank[!is.na(swe_blank)]<-0
swe_blank
swe_water<- swe_blank
gml_dir<- "../IschnuraRangeShifter/lakes_gml_inspire/"
gml_files<- list.files(gml_dir, pattern=".gml")
##read in a single file
sp_dat<- st_read(paste(gml_dir,gml_files[1], sep=""))
swe_blank<- resample(swe_blank, swe_water)
swe_blank
#perc water
##more detailed water data, this is in EPSG:3006
SWE<- readRDS("data/gadm/gadm41_SWE_0_pk.rds")
swe_proj<- terra::project(SWE,"EPSG:3006")
swe_water<- rast("data/perc_cover_freshwater.tif")
names(swe_water)<- "water_cover"
plot(swe_water)
swe_blank<- rast("data/final_sweden/sweden_blank.tif")
swe_blank<- rast("data/final_sweden/static/sweden_blank.tif")
swe_filled<- cover(swe_water, swe_blank)
swe_water_proj<- terra::project(swe_filled, swe_elev)
swe_elev<- rast("data/SWE_msk_alt_tif/SWE_msk_alt.tif")
swe_water_proj<- terra::project(swe_filled, swe_elev)
swe_blank<- rast("data/final_sweden/sweden_WGS84_blank.tif")
swe_water<- rast("data/final_sweden/static/sweden_perc_water_WGS84.tif")
swe_water<- resample(swe_water, swe_blank)
years<- seq(2000,2022,1)
for(y in 1:length(years)){
print(years[y])
# yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
yr_env<- rast(paste("data/total_timeseries/", years[y], "_layers.tif", sep=""))
swe_msk<- mask(yr_env, swe_blank)
swe_msk[["Perc_water"]]<- swe_water
# writeRaster(swe_msk, paste("data/final_sweden/swe_", years[y], "_layers.tif", sep=""))
writeRaster(swe_msk, paste("data/total_timeseries/sweden/swe_", years[y], "_layers.tif", sep=""))
rm(yr_env)
gc()
}
years<- seq(2001,2022,1)
for(y in 1:length(years)){
print(years[y])
# yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
yr_env<- rast(paste("data/total_timeseries/", years[y], "_layers.tif", sep=""))
swe_msk<- mask(yr_env, swe_blank)
swe_msk[["Perc_water"]]<- swe_water
# writeRaster(swe_msk, paste("data/final_sweden/swe_", years[y], "_layers.tif", sep=""))
writeRaster(swe_msk, paste("data/total_timeseries/sweden/swe_", years[y], "_layers.tif", sep=""))
rm(yr_env)
gc()
}
years<- seq(2000,2022,1)
for(y in 1:length(years)){
print(years[y])
# yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
yr_env<- rast(paste("data/total_timeseries/", years[y], "_layers.tif", sep=""))
swe_msk<- mask(yr_env, swe_blank)
swe_msk[["Perc_water"]]<- swe_water
# writeRaster(swe_msk, paste("data/final_sweden/swe_", years[y], "_layers.tif", sep=""))
writeRaster(swe_msk, paste("data/total_timeseries/sweden/swe_", years[y], "_layers.tif", sep=""))
rm(yr_env)
gc()
}
for(y in 1:length(years)){
print(years[y])
# yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
yr_env<- rast(paste("data/total_timeseries/", years[y], "_layers.tif", sep=""))
swe_msk<- mask(yr_env, swe_blank)
swe_msk[["Perc_water"]]<- swe_water
# writeRaster(swe_msk, paste("data/final_sweden/swe_", years[y], "_layers.tif", sep=""))
writeRaster(swe_msk, paste("data/total_timeseries/sweden/swe_", years[y], "_layers.tif", sep=""), overwrite=T)
rm(yr_env)
gc()
}
##need to apply the large model to Sweden
#env layers
#2013
swe_2013<- rast("data/total_timeseries/sweden/swe_2013_layers.tif")
plot(swe_2013)
plot(swe_blank)
swe_blank<- mask(fenno_coast, SWE)
SWE<- readRDS("data/gadm/gadm41_SWE_0_pk.rds")
crs(SWE)<- crs(fenno_coast)
swe_blank<- mask(fenno_coast, SWE)
plot(swe_blank)
swe_blank[!is.na(swe_blank)]<- 0
#swe_blank <- resample(swe_blank, fenno_coast)
writeRaster(swe_blank, "data/final_sweden/sweden_WGS84_blank.tif")
#swe_blank <- resample(swe_blank, fenno_coast)
writeRaster(swe_blank, "data/final_sweden/sweden_WGS84_blank.tif", overwrite=T)
swe_water<- resample(swe_water, swe_blank)
plot(swe_water)
for(y in 1:length(years)){
print(years[y])
# yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
yr_env<- rast(paste("data/total_timeseries/", years[y], "_layers.tif", sep=""))
swe_msk<- mask(yr_env, swe_blank)
swe_msk[["Perc_water"]]<- swe_water
# writeRaster(swe_msk, paste("data/final_sweden/swe_", years[y], "_layers.tif", sep=""))
writeRaster(swe_msk, paste("data/total_timeseries/sweden/swe_", years[y], "_layers.tif", sep=""), overwrite=T)
rm(yr_env)
gc()
}
# swe_2013<- rast("data/final_sweden/swe_2013_layers.tif")
swe_2013<- rast("data/total_timeseries/sweden/swe_2013_layers.tif")
plot(swe_2013)
#use it to predict onto smaller scale...i think
p_swe <- predict(m, swe_2013,filename='data/total_timeseries/sweden/2013_predict_swe.img', overwrite=T)
#but if you have already run the predict() as above, you can use the outputs
en_swe <- ensemble(m, p_swe, filename='data/total_timeseries/ensemble_sweden_2013.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
en_swe
plot(en_swe, col=terr_cls)
names(en_swe)<- "ensemble_weighted"
#read in env data
terr_cls<- terrain.colors(100, rev=T)
plot(en_swe, col=terr_cls)
dev.off()
plot(en_swe, col=terr_cls)
en_swe<- rast("data/total_timeseries/sweden/ensemble_sweden_2013.img")
names(en_swe)<- "ensemble_weighted"
en_swe
plot(en_swe, col=terr_cls)
###create layers for each year
years<- seq(2013,2022,1)
###create layers for each year
years<- seq(2013,2022,1)
for(y in 1:length(years)){
print(years[y])
yr_layer<- rast(paste("data/total_timeseries/sweden/swe_", years[y], "_layers.tif", sep=""))
p_yr <- predict(m, yr_layer,filename=paste('data/total_timeseries/sweden/', years[y], "_predict_swe.img", sep=""), overwrite=T)
en_yr <- ensemble(m, p_yr, filename=paste("data/total_timeseries/sweden/ensemble_sweden_", years[y],
".img", sep=""),setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
}
#deciding how to discretise the suitability
hab_K<- matrix(NA, nrow=10, ncol=2)
#deciding how to discretise the suitability
hab_K<- matrix(NA, nrow=10, ncol=3)
colnames(hab_K)<- c("Min_suit", "Hab_type", "K")
hab_K$Min_suit<- seq(0,90,10)
seq(0,90,10)
hab_K[,1]<- seq(0,90,10)
#deciding how to discretise the suitability
hab_K<- as.data.frame(matrix(NA, nrow=10, ncol=3))
colnames(hab_K)<- c("Min_suit", "Hab_type", "K")
hab_K[,1]<- seq(0,90,10)
hab_K[,2]<- seq(0,9,1)
hab_K[,3]<- c(0,0,10,30, 100,500, 1500,3000,3500,4000)
plot(x=hab_K[,1], y=hab_K[,3], xlab="Suitability %", ylab="K (ind/ha)")
hab_K[,3]<- c(0,0,10,100,500, 1500,3000,3500,4000, 4500)
plot(x=hab_K[,1], y=hab_K[,3], xlab="Suitability %", ylab="K (ind/ha)")
hab_K[,3]<- c(0,0,10,100,500, 1500,3000,3500,4000, 4200)
plot(x=hab_K[,1], y=hab_K[,3], xlab="Suitability %", ylab="K (ind/ha)")
swe_en_2013<- raste(paste("data/total_timeseries/sweden/ensemble_sweden_", years[y],
".img", sep=""))
swe_en_2013<- rast(paste("data/total_timeseries/sweden/ensemble_sweden_", years[y],
".img", sep=""))
swe_en_2013
swe_en_2013[1,1]
swe_en_2013[100,100]
swe_en_2013[1500,1500]
swe_en_2013[1500,1500]/10
swe_en_2013[1500,1500]*10
View(hab_K)
floor(hab_K)
floor(swe_en_2013[1500,1500]*10)
for(r in 1:nrow(swe_en_2013)){
for(c in 1:ncol(swe_en_2013)){
k_row<- floor(swe_en_2013[r,c]*10)+1
swe_en_2013_hab[r,c]=hab_K[k_row,2]
}
}
for(r in 1:nrow(swe_en_2013)){
for(c in 1:ncol(swe_en_2013)){
if(is.na(swe_en_2013[r,c])){next}
k_row<- floor(swe_en_2013[r,c]*10)+1
swe_en_2013_hab[r,c]=hab_K[k_row,2]
}
}
r
c
swe_en_2013_hab<- floor(swe_en_2013*10)
swe_en_2013_hab
plot(swe_en_2013_hab)
par(mfrow=c(1,2))
plot(swe_en_2013)
plot(swe_en_2013_hab)
par(mfrow=c(1,1))
plot(swe_en_2013_hab)
hab_K
View(hab_K)
y=1
years<- seq(2013,2022,1)
swe_yr<- raste(paste("data/total_timeseries/sweden/ensemble_sweden_", years[y],
".img", sep=""))
swe_yr<- rast(paste("data/total_timeseries/sweden/ensemble_sweden_", years[y],
".img", sep=""))
proj_yr<- terra::project(swe_yr,"EPSG:3006")
plot(proj_yr)
proj_yr
?resample
?terra::res
res(proj)<- 1000
res(proj_yr)<- 1000
proj_yr
plot(proj_yr)
swe_filled
proj_yr<- terra::project(swe_yr,"EPSG:3006")
res_yr<- resample(proj_yr, swe_filled)
res_yr
proj_yr
?rast
?aggregate
res(swe_filled)
#create a blank for 1000m
res_blank<- rast(ext(swe_filled), resolution=c(1000,1000))
res_blank
crs(res_blank)<- crs(swe_filled)
res_blank
res_yr<- resample(proj_yr, res_blank)
res_yr
plot(res_yr
)
plot(proj_yr)
ncell(res_yr)
years<- seq(2013,2022,1)
for(y in 1:length(years)){
print(years[y])
swe_yr<- rast(paste("data/total_timeseries/sweden/ensemble_sweden_", years[y],
".img", sep=""))
proj_yr<- terra::project(swe_yr,"EPSG:3006")
res_yr<- resample(proj_yr, res_blank)
writeRaster(res_yr, paste("data/total_timeseries/sweden/swe_en_proj_",
years[y], "_1km.tif", sep=""), overwrite=T)
}
1-((2*60+43)/(10*60+23))
View(env_ext_dup)
pres_2013<- env_ext_dup[env_ext_dup$year<=2013,]
presence_ras<- swe_en_2013
presence_ras[!(is.na(presence_ras))]<- 0
presence_ras
#i have presence in lat lon
pres_2013_vect<- vect(pres_2013[,4:5], geom=c("longitude", "latitude"))
#i have presence in lat lon
pres_2013_vect<- vect(pres_2013[,4:5], geom=c("x", "y"))
pres_2013_proj<- terra::project(pres_2013_vect,"EPSG:3006" )
?terra::project
crs(pres_2013_vect)
?vect
#i have presence in lat lon
pres_2013_vect<- vect(pres_2013[,4:5], geom=c("x", "y"), crs=crs(swe_2013))
pres_2013_proj<- terra::project(pres_2013_vect,"EPSG:3006" )
#extract cell number
extract_2013<- terra::extract(swe_en_2013,pres_2013_proj)
crs(swe_en_2013)
#extract cell number
swe_en_proj<- rast("data/total_timeseries/sweden/swe_en_proj_2013_1km.tif")
extract_2013<- terra::extract(swe_en_proj,pres_2013_proj)
View(extract_2013)
?extract
extract_2013<- terra::extract(swe_en_proj,pres_2013_proj, cells=T)
View(extract_2013)
presence_ras[3456]
extract_2013<- complete.cases(extract_2013)
extract_2013<- extract_2013[complete.cases(extract_2013),]
extract_2013<- terra::extract(swe_en_proj,pres_2013_proj, cells=T)
extract_2013<- extract_2013[complete.cases(extract_2013),]
#assign cells 1 and 0 for presence
for(r in 1:nrow(extract_2013)){
presence_ras[extract_2013$cell[r]]=1
}
gc()
r
presence_ras[extract_2013$cell[r]]
presence_ras[extract_2013$cell]=1
plot(presence_ras)
presence_ras[741555]
ncell(presence_ras)
presence_ras
presence_ras<- swe_en_proj
presence_ras[!(is.na(presence_ras))]<- 0
presence_ras[extract_2013$cell]=1
plot(presence_ras)
extract_2013<- terra::extract(swe_en_proj,pres_2013_proj, cells=T)
presence_ras[extract_2013$cell]=1
plot(presence_ras)
extract_2013<- extract_2013[complete.cases(extract_2013),]
#assign cells 1 and 0 for presence
presence_ras[extract_2013$cell]=1
plot(presence_ras)
writeRaster(presence_ras, "data/total_timeseries/sweden/initial_dist.tif", overwrite=T)
SWE<- readRDS("data/gadm/gadm41_SWE_0_pk.rds")
swe_out_proj<- terra::project(SWE, "EPSG:3006")
plot(swe_out_proj)
plot(presence_ras, col=c("white", "red"), add=T)
plot(presence_ras, col=c("white", "red"))
plot(swe_out_proj, add=T)
