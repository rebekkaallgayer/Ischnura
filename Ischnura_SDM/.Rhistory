res=1500 #resolution in metres
min_x=428430 #this is the minimum x coordinate IN METRES!
min_y=6123500 #this is the minimum y coordinate IN METRES!
nr=245 #number of rows
nc=198 #number of columns
max_y=min_y+(res*nr)
max_x=min_x+(res*nc)
min_x
max_x
min_y
max_y
install.packages("data.table")
library(data.table)
library(raster)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(lattice)
library(RColorBrewer)
library(PresenceAbsence)
install.packages("PresenceAbsence")
library(PresenceAbsence)
setwd("C:/Users/Rey/Documents/Ischnura/SDM_tutorials/Damaris_new")
bg <- terra::rast('Prac3_data/Prac3_UK_mask.tif')
sp_dat <- read.table('Prac3_data/Prac3_RingOuzel.txt',header=T)
summary(sp_dat)
# Plot GB land mass
plot(bg,col='grey',axes=F,legend=F)
# Plot GB land mass
terra::plot(bg,col='grey',axes=F,legend=F)
# Plot presences in red and absences in black
terra::plot(extend(terra::rast(sp_dat[,1:3], crs=crs(bg), type='xyz'), bg), col=c('black','red'), legend=F,add=T)
?extend
# Plot presences in red and absences in black
plot(terra::extend(terra::rast(sp_dat[,1:3], crs=crs(bg), type='xyz'), bg), col=c('black','red'), legend=F,add=T)
library(terra)
# Plot presences in red and absences in black
plot(extend(terra::rast(sp_dat[,1:3], crs=crs(bg), type='xyz'), bg), col=c('black','red'), legend=F,add=T)
?extend
# We first fit a GLM for the bio1 variable assuming a linear relationship:
m1 <- glm(Turdus_torquatus ~ bio1, family="binomial", data= sp_dat)
# We can get a summary of the model:
summary(m1)
View(sp_dat)
# Fit a quadratic relationship with bio1:
m1_q <- glm(Turdus_torquatus ~ bio1 + I(bio1^2), family="binomial", data= sp_dat)
summary(m1_q)
# Or use the poly() function:
summary( glm(Turdus_torquatus ~ poly(bio1,2) , family="binomial", data= sp_dat) )
# Fit two linear variables:
summary( glm(Turdus_torquatus ~ bio1 + bio8, family="binomial", data= sp_dat) )
# Fit three linear variables:
summary( glm(Turdus_torquatus ~ bio1 + bio8 + bio17, family="binomial", data= sp_dat) )
# Fit three linear variables with up to three-way interactions
summary( glm(Turdus_torquatus ~ bio1 * bio8 * bio17, family="binomial", data= sp_dat) )
# Fit three linear variables with up to two-way interactions
summary( glm(Turdus_torquatus ~ bio1 + bio8 + bio17 +
bio1:bio8 + bio1:bio17 + bio8:bio17,
family="binomial", data= sp_dat) )
library(corrplot)
# We first estimate a correlation matrix from the predictors.
# We use Spearman rank correlation coefficient, as we do not know
# whether all variables are normally distributed.
cor_mat <- cor(sp_dat[,-c(1:3)], method='spearman')
# We can visualise this correlation matrix. For better visibility,
# we plot the correlation coefficients as percentages.
corrplot.mixed(cor_mat, tl.pos='lt', tl.cex=0.6, number.cex=0.5, addCoefasPercent=T)
library(mecofun)
# Run select07()
var_sel <- select07(X=sp_dat[,-c(1:3)],
y=sp_dat$Turdus_torquatus,
threshold=0.7)
# Check out the structure of the resulting object:
str(var_sel)
# We extract the names of the weakly correlated predictors ordered by the univariate variable importance in terms of AIC:
pred_sel <- var_sel$pred_sel
# How many presence points do we have?
sum(sp_dat$Turdus_torquatus)
pred_sel
View(var_sel)
# Fit the full model:
m_full <- glm( Turdus_torquatus ~ bio1 + I(bio1^2) + bio8 + I(bio8^2),
family='binomial', data=sp_dat)
# Inspect the model:
summary(m_full)
# Explained deviance:
expl_deviance(obs = sp_dat$Turdus_torquatus,
pred = m_full$fitted)
m_step <- step(m_full)
# Inspect the model:
summary(m_step)
# Explained deviance:
expl_deviance(obs = sp_dat$Turdus_torquatus,
pred = m_step$fitted)
# Exercise:
#
#   Load the second species data set for the Yellowhammer.
#bg <- terra::rast('Prac3_data/Prac3_UK_mask.tif')
yh_dat <- read.table('Prac3_data/Prac3_YellowHammer.txt',header=T)
summary(yh_dat)
# Plot GB land mass
terra::plot(bg,col='grey',axes=F,legend=F)
# Plot presences in red and absences in black
plot(extend(terra::rast(yh_dat[,1:3], crs=crs(bg), type='xyz'), bg), col=c('black','red'), legend=F,add=T)
# Check for collinearity and reduce the data set to only weakly correlated variables.
cor_mat <- cor(yh_dat[,-c(1:3)], method='spearman')
# We can visualise this correlation matrix. For better visibility,
# we plot the correlation coefficients as percentages.
corrplot.mixed(cor_mat, tl.pos='lt', tl.cex=0.6, number.cex=0.5, addCoefasPercent=T)
# Run select07()
var_sel <- select07(X=yh_dat[,-c(1:3)],
y=yh_dat$Turdus_torquatus,
threshold=0.7)
View(yh_dat)
# Run select07()
var_sel <- select07(X=yh_dat[,-c(1:3)],
y=yh_dat$Emberiza_citrinella,
threshold=0.7)
# Check out the structure of the resulting object:
str(var_sel)
# We extract the names of the weakly correlated predictors ordered by the univariate variable importance in terms of AIC:
pred_sel <- var_sel$pred_sel
sum(yh_dat$Emberiza_citrinella)
pred_sel
var_sel
View(var_sel)
# Define a full model with all weakly correlated variables including their linear and quadratic terms.
# Fit the full model:
m_full_yh <- glm( Emberiza_citrinella ~ bio12 + I(bio12^2) + bio9 + I(bio9^2),
family='binomial', data=yh_dat)
# Inspect the model:
summary(m_full_yh)
# Run the full model.
# Simplify the model using stepwise variable selection step()
# Explained deviance:
expl_deviance(obs = yh_dat$Emberiza_citrinella,
pred = m_full_yh$fitted)
m_step_yh <- step(m_full_yh)
# Inspect the model:
summary(m_step_yh)
# Define a full model with all weakly correlated variables including their linear and quadratic terms.
# Fit the full model:
m_full_yh <- glm( Emberiza_citrinella ~ bio12 + I(bio12^2) + bio9 + I(bio9^2)
+ bio1 + I(bio1^2)+ bio8 + I(bio8^2)+ bio3 + I(bio3^2),
family='binomial', data=yh_dat)
# Inspect the model:
summary(m_full_yh)
# Run the full model.
# Simplify the model using stepwise variable selection step()
# Explained deviance:
expl_deviance(obs = yh_dat$Emberiza_citrinella,
pred = m_full_yh$fitted)
m_step_yh <- step(m_full_yh)
# Inspect the model:
summary(m_step_yh)
# Inspect the model:
summary(m_full_yh)
# Run the full model.
# Simplify the model using stepwise variable selection step()
# Explained deviance:
expl_deviance(obs = yh_dat$Emberiza_citrinella,
pred = m_full_yh$fitted)
# Compare the full model and the reduced model in terms of AIC and explained deviance.
# Explained deviance:
expl_deviance(obs = yh_dat$Emberiza_citrinella,
pred = m_step_yh$fitted)
getwd()
library(terra)
setwd("C:/Users/Rey/Documents/Ischnura/Ischnura_SDM/")
##read in occurrence data
isch_dat <- read.table('data/Ischnura_elegans_2022_10_26.csv', header=T, sep=',')
#filter for country, if needed
isch_sw<- isch_dat[isch_dat$country=="Sweden",]
#make shapefile of Norway, Finland, and Sweden, called "Fenno"
countries<-getData("countries")
#make shapefile of Norway, Finland, and Sweden, called "Fenno"
#countries<-getData("countries")
SWE <- gadm(country='SWE', level=0, path="data") #level 0 means just the country outline
library(geodata)
SWE<- rast("data/gadm/gadm41_SWE_0_pk.rds")
SWE<- readRDS("data/gadm/gadm41_SWE_0_pk.rds")
plot(SWE)
# occurrence points:
ischpts <- isch_dat[c(5,4)]
#ischpts$species <- c("Ischnura_elegans")
#ischpts <- ischpts[,c(3, 1:2)]
dups <- duplicated(ischpts[,1:2])
ischpts2 <- ischpts[!dups,]
# colnames(ischpts2) <- c("species", "lon", "lat")
colnames(ischpts2) <- c("lon", "lat")
#ipts <- SpatialPointsDataFrame(data=ischpts2, coords = ischpts2[,c(2:3)], proj4string = CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
ipts <- vect(ischpts2, geom=c("lon","lat"),crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
# FIN <- gadm(country='Finland', level=0, path="data")
FIN<- readRDS("data/gadm/gadm41_FIN_0_pk.rds")
# #plot(FIN)
# NOR <- gadm(country='Norway', level=0, path="data")
NOR<- readRDS("data/gadm/gadm41_NOR_0_pk.rds")
# #plot(NOR)
Fenno1<- terra::union(SWE, FIN)
Fenno<- union(Fenno1, NOR)
plot(Fenno)
#select occurrence points that are in Fenno only:
ov <- overlay(ipts, Fenno)
class(ipts)
class(Fenno)
ov <- extract(ipts, Fenno)
?extract
View(ov)
View(ipts)
points(ipts)
plot(Fenno)
points(ipts, col="red", cex=0.5)
plot(Fenno)
points(ipts, col="red", cex=0.1)
#select target background points (= Zygoptera), Targeted background sampling using sightings of a wider group of similar organisms, to control for sampling effort (Phillips et al. 2009)
cal.rec <- gbif("calopteryx", "*", ext=Fenno)
?rgeos::gbif
library(sdm)
#select target background points (= Zygoptera), Targeted background sampling using sightings of a wider group of similar organisms, to control for sampling effort (Phillips et al. 2009)
cal.rec <- gbif("calopteryx", "*", ext=Fenno)
?dismo::gbif
library(dismo)
#select target background points (= Zygoptera),
#Targeted background sampling using sightings of a wider group of
#similar organisms, to control for sampling effort (Phillips et al. 2009)
cal.rec <- gbif("calopteryx", "*", ext=Fenno, download=T)
?terra::extent
?terra::ext
#select target background points (= Zygoptera),
#Targeted background sampling using sightings of a wider group of
#similar organisms, to control for sampling effort (Phillips et al. 2009)
cal.rec <- gbif("calopteryx", "*", ext=ext(Fenno), download=T)
ext(Fenno)
#select target background points (= Zygoptera),
#Targeted background sampling using sightings of a wider group of
#similar organisms, to control for sampling effort (Phillips et al. 2009)
e<- as.numeric(ext(Fenno))
#select target background points (= Zygoptera),
#Targeted background sampling using sightings of a wider group of
#similar organisms, to control for sampling effort (Phillips et al. 2009)
e<- extent(Fenno)[1:4]
#select target background points (= Zygoptera),
#Targeted background sampling using sightings of a wider group of
#similar organisms, to control for sampling effort (Phillips et al. 2009)
e<- ext(Fenno)[1:4]
e
cal.rec <- gbif("calopteryx", "*", ext=e, download=T)
#epa.rec <- gbif("epallage", "*", ext=Fenno) # no records
les.rec <- gbif("lestes", "*", ext=e)
class(e)
ext(Fenno)
sym.rec <- gbif("sympecma", "*", ext=e)
#epa.rec <- gbif("epallage", "*", ext=Fenno) # no records
les.rec <- gbif("lestes", "*")
pla.rec <- gbif("platycnemis", "*")
cal.rec <- gbif("Calopteryx", "*", ext=e, download=T)
cal.rec <- gbif("Calopteryx",ext=e, download=T)
cal.rec <- gbif("Calopteryx",download=T)
# Acinonyx jubatus
sp <- gbif("Acinonyx","jubatus",download= F)
cal.rec <- gbif("Calopteryx")
sym.rec <- gbif("sympecma", "*", ext=e)
#cer.rec <- gbif("ceragrion", "*", ext=Fenno) #no records
pla.rec <- gbif("platycnemis", "*", ext=e)
isch.rec <- gbif("ischnura", "*", ext=e)
ena.rec <- gbif("enallagma", "*", ext=e)
ena.rec <- gbif("enallagma")
gbif_test<- gbif("Ischnura", "elegans")
gbif_test<- gbif("Ischnura", "elegans", ext=e)
gbif_test<- gbif("Ischnura", "*", ext=e)
cal.rec <- gbif("Calopteryx", "*", ext=e)
cal.rec <- gbif("Calopteryx", "aequabilis")
cal.rec <- gbif("Calopteryx", "aequabilis", ext=e)
cal.rec <- gbif("Calopteryx", "*")
?gbif
cal.rec <- gbif("Calopteryx", "*")
#getting species data
library(rgbif)
install.packages("rgbif")
#getting species data
library(rgbif)
# Check out the number of occurrences found in GBIF:
occ_count()
# number of observations:
occ_count(basisOfRecord='OBSERVATION')
# number of occurrences reported for Germany:
occ_count(country=isocodes[grep("Germany", isocodes$name), "code"])
# number of observations reported for Germany:
occ_count(
country = rgbif::rgb_country_codes("Germany")$iso2,
basisOfRecord = 'OBSERVATION'
)
# Check for synonyms
name_suggest(q='Sorex alpinus', rank='species')
# Check number of records - here filtered to those with coordinate information
occ_search(scientificName = "Sorex alpinus", hasCoordinate=T, limit = 10)
?occ_search
occ_search(scientificName = "Sorex alpinus", hasCoordinate=T, basisOfRecord='HUMAN_OBSERVATION', limit = 10)
gbif_shrew <- occ_search(scientificName = "Sorex alpinus", hasCoordinate=T, basisOfRecord='HUMAN_OBSERVATION', limit = 600)
# We are just interested in the data frame containing the records
gbif_shrew <- gbif_shrew$data
library(maps)
maps::map('world',xlim=c(5,30), ylim=c(40,55))
points(gbif_shrew$decimalLongitude, gbif_shrew$decimalLatitude, col='red',  pch=19)
library(CoordinateCleaner)
install.packages("CoordinateCleaner")
library(CoordinateCleaner)
# We use only those data entries with coordinate information - Note that you don't need this if you have used the hasCoordinate=T in the occ_search() function:
gbif_shrew <- subset(gbif_shrew, !is.na(decimalLatitude))
# We now clean the coordinates and check for outliers - see ?clean_coordinates for more options
gbif_shrew_cleaned_coord <- clean_coordinates(gbif_shrew, lon="decimalLongitude", lat="decimalLatitude", countries="countryCode", tests=c("centroids", "outliers", "duplicates", "institutions"), inst_rad = 1000)
# Plot world map
maps::map('world',xlim=c(5,30), ylim=c(40,55))
# Plot all gbif points downloaded
points(gbif_shrew$decimalLongitude, gbif_shrew$decimalLatitude, col='red',  pch=19)
# Plot all remaining points after cleaning
points(gbif_shrew$decimalLongitude[gbif_shrew_cleaned_coord$.summary], gbif_shrew$decimalLatitude[gbif_shrew_cleaned_coord$.summary], col='blue',  pch=18)
# Store the cleaned point locations in a new object
gbif_shrew_cleaned <- gbif_shrew[gbif_shrew_cleaned_coord$.summary,]
detach("package:dismo", unload = TRUE)
?rgb_country_codes
?name_suggest
# Check for synonyms
name_suggest(q='Calopteryx', rank='genus')
?occ_search
# Check number of records - here filtered to those with coordinate information
occ_search(scientificName = "Calopteryx", hasCoordinate=T, basisOfRecord='HUMAN_OBSERVATION', limit = 10)
# Check for synonyms
name_suggest(q='Calopteryx', rank='genus')
occ_search(scientificName= "Calopteryx")
gbif_shrew1 <- occ_search(scientificName = "Sorex", hasCoordinate=T, basisOfRecord='HUMAN_OBSERVATION', limit = 600)
occ_search(scientificName= "Calopteryx")
# Check for synonyms
name_suggest(q='Calopteryx', rank='genus')
occ_search(scientificName= "Calopteryx")
occ_search(scientificName= "Calopteryx", hasCoordinate=F)
name_suggest(q="epallage", rank='genus')
occ_search(scientificName= "epallage")
name_suggest(q="Ischnura", rank='genus')
occ_search(scientificName= "Ischnura")
occ_search(scientificName= "Epallage")
occ_search(scientificName= "Lestes")
?occ_count
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION')
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION', hasCoordinate=T)
e
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION', hasCoordinate=T, geometry=c(e[1], e[3], e[2], e[4]))
e[1]
e[1]+e[2]
values(e)
e[p1[]]
e[[1]]
geometry=c(e[[1]], e[[3]], e[[2]], e[[4]])
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION', hasCoordinate=T, geometry=c(e[[1]], e[[3]], e[[2]], e[[4]]))
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION', hasCoordinate=T)
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=c(e[[3:4]]), decimalLongitude=c(e[[1:2]]))
e[[3:4]]
e[[3]]
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=c(e[[3]], e[[4]]), decimalLongitude=c(e[[1]], e[[2]]))
as.character(e[[1]])
as.character(c(e[[1]],e[[2]]))
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=as.character(c(e[[3]],e[[4]])),
decimalLongitude=as.character(c(e[[1]], e[[2]])))
as.character(c(e[[3]],e[[4]]))
as.character(c(e[[1]], e[[2]]))
e
paste(e[[1]], e[[2]], sep="")
paste(e[[1]], e[[2]], sep=",")
occ_count(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
# Check for synonyms
name_suggest(q="sympecma", rank='genus')
occ_count(scientificName= "sympecma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
occ_count(scientificName= "cercion", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
occ_count(scientificName= "coenagrion", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
coe.rec <-occ_search(scientificName= "coenagrion", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
occ_count(scientificName= "erythromma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
ery.rec <-occ_search(scientificName= "erythromma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
View(ery.rec)
occ_count(scientificName= "pyrrhosoma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
pyr.rec <-occ_search(scientificName= "pyrrhosoma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
occ_count(scientificName= "enallagma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
occ_count(scientificName= "ceragrion", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
occ_count(scientificName= "platycnemis", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
pla.rec <-occ_search(scientificName= "platycnemis", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
isch_gbif<- isch_rec$data
# Check number of records - here filtered to those with coordinate information
isch_rec<- occ_search(scientificName= "Ischnura", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
isch_gbif<- isch_rec$data
sym_gbif<- sym.rec$data
coe_gbif<- coe.rec$data
ery_gbif<- ery.rec
ery_gbif<- ery.rec$data
pyr_gbif<- pyr.rec$data
pla_gbif<- pla.rec$data
e
#maps::map('world',xlim=c(5,30), ylim=c(40,55))
plot(Fenno)
points(ipts, "red", ces=0.1) #ischnura
View(ipts)
points(sym_gbif$decimalLongtiude, sym_gbif$decimalLatitude, col="blue", cex=0.1)
points(ipts, "red", cex=0.1) #ischnura
points(ipts, "red") #ischnura
head(ipts)
#ipts <- SpatialPointsDataFrame(data=ischpts2, coords = ischpts2[,c(2:3)], proj4string = CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
ipts <- vect(ischpts2, geom=c("lon","lat"),crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
head(ipts)
points(ipts, col="red", cex=0.1)
# occurrence points:
ischpts <- isch_dat[c(5,4)]
#ischpts$species <- c("Ischnura_elegans")
#ischpts <- ischpts[,c(3, 1:2)]
dups <- duplicated(ischpts[,1:2])
ischpts2 <- ischpts[!dups,]
# colnames(ischpts2) <- c("species", "lon", "lat")
colnames(ischpts2) <- c("lon", "lat")
#ipts <- SpatialPointsDataFrame(data=ischpts2, coords = ischpts2[,c(2:3)], proj4string = CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
ipts <- vect(ischpts2, geom=c("lon","lat"),crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
points(ipts, col="red", cex=0.1)
class(ipts)
class(Fenno)
plot(Fenno)
points(ipts, col="red", cex=0.1)
head(ipts)
plot(ipts)
head(ischpts2)
points(ischpts2, col="red", cex=0.1)
plot(Fenno)
points(ischpts2, col="red", cex=0.1)
points(ipts, col="red", cex=0.1)
#points(ipts, col="red", cex=0.1)
isch_fenno<- intersect(ischpts2, Fenno)
#points(ipts, col="red", cex=0.1)
ov <- overlay(ipts, Fenno)
#points(ipts, col="red", cex=0.1)
ov <- overlay(ischpts2, Fenno)
?overlay
?mask
?app
#maps::map('world',xlim=c(5,30), ylim=c(40,55))
plot(Fenno)
points(ischpts2, "red", cex=0.1) #ischnura
View(ischpts2)
points(sym_gbif$decimalLongtiude, sym_gbif$decimalLatitude, col="blue", cex=0.1)
#see how many records we have
occ_count(scientificName= "sympecma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
sym.rec<- occ_search(scientificName= "sympecma", basisOfRecord='HUMAN_OBSERVATION',
hasCoordinate=T, decimalLatitude=paste(e[[3]], e[[4]], sep=","),
decimalLongitude=paste(e[[1]], e[[2]], sep=","))
sym_gbif<- sym.rec$data
points(sym_gbif$decimalLongtiude, sym_gbif$decimalLatitude, col="blue", cex=0.1)
View(sym_gbif)
points(sym_gbif$decimalLongitude, sym_gbif$decimalLatitude, col="blue", cex=0.1)
points(ischpts2, "red", cex=0.1) #ischnura
ischpts2 <- ischpts[!dups,]
# colnames(ischpts2) <- c("species", "lon", "lat")
colnames(ischpts2) <- c("lon", "lat")
points(ischpts2, col="red", cex=0.1)
points(coe_gbif$decimalLongitude, sym_gbif$decimalLatitude, col="green", cex=0.1)
points(ery_gbif$decimalLongitude, sym_gbif$decimalLatitude, col="orange", cex=0.1)
points(pyr_gbif$decimalLongitude, sym_gbif$decimalLatitude, col="pink", cex=0.1)
points(pla_gbif$decimalLongitude, sym_gbif$decimalLatitude, col="purple", cex=0.1)
head(sym_gbif)
?extract
#need to extract points that overlap with Fenno
gbif_test<- extract(ischpts2, Fenno)
?crop
?vect
#ipts <- SpatialPointsDataFrame(data=ischpts2, coords = ischpts2[,c(2:3)], proj4string = CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
ipts <- vect(ischpts2, geom=c("lon","lat"),crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
plot(ipts)
head(ipts)
head(iscpts2)
head(ischpts2)
#ipts <- SpatialPointsDataFrame(data=ischpts2, coords = ischpts2[,c(2:3)], proj4string = CRS(" +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
ipts <- terra::vect(ischpts2, geom=c("lon","lat"),crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
plot(Fenno)
points(ipts)
class(ipts)
View(gbif_shrew1)
