legend(500,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
# print(paste("fec is ", fec, sep=""))
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5, cex=0.8)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=5, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
legend(400,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
b<- 1/c(seq(500,1,-100),1)
cols<- c("red", "blue", "black", "green", "purple", "orange")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec*exp(-1*b[i]*Nt[j])
b<- 1/seq(500,1,-100)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=0.94
Nt<- seq(0,10000,100)
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=1
Nt<- seq(0,10000,100)
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(600,100000,100)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(600,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,100000,100)
b<- 1/500
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/10000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/15000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/20000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/50000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/1000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,1000000,1000)
b<- 1/5000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/7000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/6000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
300^2
rnorm(20, 0.075, 0.0075)
n_layers=9 #how many layer files do you have?
min_depth=0 #surface=0, otherwise which minimum depth to plot from
dint=10 #depth interval in metres
res=1500 #resolution in metres
min_x=428430 #this is the minimum x coordinate IN METRES!
min_y=6123500 #this is the minimum y coordinate IN METRES!
nr=245 #number of rows
nc=198 #number of columns
max_y=min_y+(res*nr)
max_x=min_x+(res*nc)
min_x
max_x
min_y
max_y
install.packages("data.table")
library(data.table)
library(raster)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(lattice)
library(RColorBrewer)
library(PresenceAbsence)
install.packages("PresenceAbsence")
library(PresenceAbsence)
library(data.table)
library(geodata)
library(terra)
library(sdm)
library(dismo)
library(maps)
library(CoordinateCleaner)
library(rgbif)
library(corrplot)
library(mecofun)
library(usdm)
library(mgcv)
library(predicts)
library(sp)
setwd("C:/Users/Rey/Documents/Ischnura/Ischnura_SDM/")
terr_cls<- terrain.colors(100, rev=T)
#read in other layers
fenno_elev<- rast("data/elev_Fenno_ll.tif")
names(fenno_elev)<- "elevation"
fenno_land<- rast("data/land_cover_Fenno_ll.tif")
names(fenno_land)<- "land_cover"
fenno_water<- rast("data/perc_cover_freshwater_Fenno_ll.tif")
names(fenno_water)<- "water_cover"
fenno_coast<- rast( "data/distance_to_coast_ll.tif")
names(fenno_coast)<- "distance_to_coast"
#make resolutions match
crs(fenno_water)<- crs(fenno_coast)
fenno_water<- terra::resample(fenno_water, fenno_coast)
##################################################
##mean
chelsa_mean_lesley<- rast("data/chelsa_yr_mean_crop_lesley_ll.tif")
ipts_train<- read.table("data/sdm_isch_train.txt", sep="\t", header=T)
#make resolutions match
crs(chelsa_mean_lesley)<- crs(fenno_coast)
chelsa_mean_layers<- terra::resample(chelsa_mean_lesley, fenno_coast)
#make extents match
ext(chelsa_mean_layers)<- ext(fenno_coast)
fenno_mean_layers<- c(chelsa_mean_layers,fenno_elev, fenno_land, fenno_water, fenno_coast)
#read in presence
ipts_train<- vect(ipts_train, crs=crs(fenno_coast))
ipts_train$species=1
#run the model
d_mean <- sdmData(species~., ipts_train, predictors= fenno_mean_layers,
bg = list(method='gRandom',n=1000))
d_mean
write.sdm(d_mean, filename='data/isch_dmean_chelsa_lesley')
d_mean<- read.sdm('data/isch_dmean_chelsa_lesley.sdd')
d_mean
m_mean <- sdm(species~., d_mean, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m_mean
write.sdm(m_mean, filename='data/isch_mmean_chelsa_lesley')
m_mean<- read.sdm('data/isch_mmean_chelsa_lesley.sdm')
m_mean
p_mean <- predict(m_mean, fenno_mean_layers,filename='data/isch_predict_chelsa_mean_lesley.img', overwrite=T)
en_mean <- ensemble(m_mean, p_mean, filename='data/ensemble_chelsa_mean_lesley.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
names(en_mean)<- "ensemble_weighted"
plot(en_mean, col=terr_cls)
points(ipts_train, size=0.7)
plot(en_mean, col=terr_cls)
points(ipts_train, size=0.1)
plot(en_mean, col=terr_cls)
points(ipts_train, cex=0.5)
plot(en_mean, col=terr_cls)
points(ipts_train, cex=0.1)
plot(en_mean, col=terr_cls)
points(ipts_train, cex=0.1)
##evaluate with model df
#need to extract some background points
df_mean <- as.data.frame(d_mean)
df_mean <- data.frame(species=df_mean$species,coords(d_mean))
colnames(df_mean)<-c("species", "lon", "lat")
bg_mean<- df_mean[df_mean$species==0,]
ipts_test<- read.table("data/sdm_isch_test.txt", sep="\t", header=T)
ipts_test$species<-1
ipts_test<- ipts_test[,c('species', 'lon', 'lat')]
ipts_mean_eval<- rbind(ipts_test, bg_mean)
xy_mean <- as.matrix(ipts_mean_eval[,c('lon','lat')])
p_mean <- terra::extract(en_mean,xy_mean)$ensemble_weighted
#head(p_mean)
#nrow(ipts_mean_eval)
#length(p_mean)
ev_mean <- evaluates(ipts_mean_eval$species,p_mean)
ev_mean@statistics
##################################################
##hybrid (2013 env but all presence points)
chelsa_lesley<- rast("data/chelsa_lesley_ll.tif")
rm(chelsa_mean_lesley)
rm(chelsa_mean_layers)
#make resolutions match
crs(chelsa_lesley)<- crs(fenno_coast)
chelsa_layers<- terra::resample(chelsa_lesley, fenno_coast)
#make extents match
ext(chelsa_layers)<- ext(fenno_coast)
fenno_layers<- c(chelsa_layers,fenno_elev, fenno_land, fenno_water, fenno_coast)
#read in presence
ipts_train<- vect(ipts_train, crs=crs(fenno_coast))
rm(fenno_mean_layers)
#run the model
d <- sdmData(species~., ipts_train, predictors= fenno_layers,
bg = list(method='gRandom',n=1000))
write.sdm(d, filename='data/isch_d_chelsa_lesley')
write.sdm(d, filename='data/isch_d_chelsa_lesley', overwrite=T)
m <- sdm(species~., d, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
rm(m_mean)
write.sdm(m, filename='data/isch_m_chelsa_lesley', overwrite=T)
p1 <- predict(m, fenno_layers,filename='data/isch_predict_chelsa_lesley.img', overwrite=T)
m
#but if you have already run the predict() as above, you can use the outputs
en1 <- ensemble(m, p1, filename='data/ensemble_chelsa_lesley.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
names(en1)<- "ensemble_weighted"
plot(en1, col=terr_cls)
points(ipts_train, cex=0.1)
df1 <- as.data.frame(d)
df <- data.frame(species=df1$species,coords(d))
colnames(df)<-c("species", "lon", "lat")
bg<- df[df$species==0,]
ipts_test<- read.table("data/sdm_isch_test.txt", sep="\t", header=T)
ipts_test$species<-1
ipts_test<- ipts_test[,c('species', 'lon', 'lat')]
ipts_eval<- rbind(ipts_test, bg)
xy <- as.matrix(ipts_eval[,c('lon','lat')])
#head(xy)
ex <- terra::extract(en1,xy)$ensemble_weighted
#head(p)
#nrow(ipts_eval)
#length(p)
ev <- evaluates(ipts_eval$species,p)
#head(p)
#nrow(ipts_eval)
#length(p)
ev <- evaluates(ipts_eval$species,ex)
ev@statistics
View(df_mean)
ipts_2013<- read.table("data/sdm_isch_2013.txt", sep="\t", header=T)
#read in presence
ipts_2013<- vect(ipts_2013, crs=crs(fenno_coast))
ipts_2013$species=1
#run the model
d_2013 <- sdmData(species~., ipts_2013, predictors= fenno_layers,
bg = list(method='gRandom',n=1000))
d_2013
write.sdm(d_2013, filename='data/isch_d2013_chelsa_lesley')
m_2013 <- sdm(species~., d_2013, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m_2013
write.sdm(m_2013, filename='data/isch_m2013_chelsa_lesley')
p_2013 <- predict(m_2013, fenno_layers,filename='data/isch_predict_chelsa_2013_lesley.img', overwrite=T)
en_2013 <- ensemble(m_2013, p_2013, filename='data/ensemble_chelsa_2013_lesley.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
names(en_2013)<- "ensemble_weighted"
plot(en_2013, col=terr_cls)
points(ipts_2013, cex=0.1)
plot(en_2013, col=terr_cls)
df_2013 <- as.data.frame(d_2013)
df_2013 <- data.frame(species=df_2013$species,coords(d_2013))
colnames(df_2013)<-c("species", "lon", "lat")
xy_2013 <- as.matrix(ipts_2013_eval[,c('lon','lat')])
# head(p)
# nrow(ipts_eval)
# length(p)
ev_2013 <- evaluates(df_2013$species,ex_2013)
xy_2013 <- as.matrix(df_2013[,c('lon','lat')])
ex_2013 <- terra::extract(en_2013,xy_2013)$ensemble_weighted
# head(p)
# nrow(ipts_eval)
# length(p)
ev_2013 <- evaluates(df_2013$species,ex_2013)
ev_2013@statistics
