Nt<- seq(0,10000,100)
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(600,100000,100)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(600,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,100000,100)
b<- 1/500
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/10000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/15000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/20000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/50000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/1000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,1000000,1000)
b<- 1/5000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/7000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/6000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
300^2
rnorm(20, 0.075, 0.0075)
n_layers=9 #how many layer files do you have?
min_depth=0 #surface=0, otherwise which minimum depth to plot from
dint=10 #depth interval in metres
res=1500 #resolution in metres
min_x=428430 #this is the minimum x coordinate IN METRES!
min_y=6123500 #this is the minimum y coordinate IN METRES!
nr=245 #number of rows
nc=198 #number of columns
max_y=min_y+(res*nr)
max_x=min_x+(res*nc)
min_x
max_x
min_y
max_y
install.packages("data.table")
library(data.table)
library(raster)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(lattice)
library(RColorBrewer)
library(PresenceAbsence)
install.packages("PresenceAbsence")
library(PresenceAbsence)
library(data.table)
# library(randomForest)
# library(lattice)
# library(RColorBrewer)
# library(PresenceAbsence)
library(geodata)
library(terra)
library(sdm)
#library(dismo)
library(maps)
library(CoordinateCleaner)
library(rgbif)
library(corrplot)
library(mecofun)
library(usdm)
setwd("C:/Users/Rey/Documents/Ischnura/Ischnura_SDM/")
##read in occurrence data
isch_dat <- read.table('data/Ischnura_elegans_2022_10_26.csv', header=T, sep=',')
#make shapefile of Norway, Finland, and Sweden, called "Fenno"
# SWE<- readRDS("data/gadm/gadm41_SWE_0_pk.rds")
# plot(SWE)
#  FIN<- readRDS("data/gadm/gadm41_FIN_0_pk.rds")
# # #plot(FIN)
#  NOR<- readRDS("data/gadm/gadm41_NOR_0_pk.rds")
#  Fenno1<- terra::union(SWE, FIN)
#  Fenno<- union(Fenno1, NOR)
Fenno<- vect("data/Fenno.gpkg")
plot(Fenno)
# occurrence points:
ischpts2<- read.table("data/isch_points_2000.txt", header=T, sep="\t")
ipts<- vect("data/isch_points_2000.gpkg")
#select target background points (= Zygoptera),
#Targeted background sampling using sightings of a wider group of
#similar organisms, to control for sampling effort (Phillips et al. 2009)
e<- ext(Fenno)[1:4]
bg_vect<- readRDS("data/background_points.rds")
bg_points<- read.table("data/background_fenno.txt", header=T, sep="\t")
points(ipts, "red", cex=0.1)
points(bg_vect, "blue", cex=0.1)
##get environmental data
terr_cls<- terrain.colors(100, rev=T)
clim_fenno<- rast("data/climate/wc2.1_country/clim_fenno.tif")
plot(clim_fenno, col=terr_cls)
#cleaned and combined ischnura points, no duplicates, with extracted env data
isch_env_dup<- read.table("data/isch_env.txt", sep="\t", header=T)
# Check for collinearity and reduce the data set to only weakly correlated variables.
cor_mat <- cor(isch_env_dup[,-c(1:3,23:24)], method='spearman')
# We can visualise this correlation matrix. For better visibility,
# we plot the correlation coefficients as percentages.
corrplot.mixed(cor_mat, tl.pos='lt', tl.cex=0.6, number.cex=0.5, addCoefasPercent=T)
v <- vifstep(isch_env_dup[,-c(1:3,23:24)]) #i think threshold is by default 10
# Run select07()
var_sel <- select07(X=isch_env_dup[,-c(1:3,23:24)],
y=isch_env_dup$Ischnura_elegans,
threshold=0.7)
# We extract the names of the weakly correlated predictors ordered by the univariate variable importance in terms of AIC:
pred_sel <- var_sel$pred_sel
# Define a full model with all weakly correlated variables including their linear and quadratic terms.
# Fit the full model:
m_full_isch <- glm( Ischnura_elegans ~ bio3 + I(bio3^2) + bio8 + I(bio8^2)
+ bio9 + I(bio9^2)+ bio10 + I(bio10^2)+ bio11 + I(bio11^2)
+ bio15 + I(bio15^2)+ bio18 + I(bio18^2),
family='binomial', data=isch_env_dup)
# Inspect the model:
summary(m_full_isch)
# Run the full model.
# Simplify the model using stepwise variable selection step()
# Explained deviance:
expl_deviance(obs = isch_env_dup$Ischnura_elegans,
pred = m_full_isch$fitted)
m_step_isch <- step(m_full_isch)
# Inspect the model:
summary(m_step_isch)
# Compare the full model and the reduced model in terms of AIC and explained deviance.
# Explained deviance:
expl_deviance(obs = isch_env_dup$Ischnura_elegans,
pred = m_step_isch$fitted)
?terra::extract
#ensemble models
#Phisically exclude the collinear variables which are identified
#using vifcor or vifstep from a set of variables.
clim_fenno_ex <- exclude(clim_fenno, v)
clim_fenno_ex
v
?sdmdata
?sdmData
#~. means it takes species column and considers the rest as predictors, don't need to individually specify
d <- sdmData(species~., ipts, predictors= clim_fenno_ex, bg = list(method='gRandom',n=1000))
clim_fenno_ex
ipts
library(dplyr)
ipts_test<- ischpts2 %>% sample_frac(.3)
?kfold
ipts_k<- kfold(ischpts2, k=3)
ipts_test<- ischpts2[ipts_k==3,]
ipts_train<- ischpts2[!ipts_k==3,]
#~. means it takes species column and considers the rest as predictors, don't need to individually specify
d <- sdmData(species~., ipts_train, predictors= clim_fenno_ex, bg = list(method='gRandom',n=1000))
head(ipts_train)
ipts_train<- vect(ipts_train)
#~. means it takes species column and considers the rest as predictors, don't need to individually specify
d <- sdmData(species~., ipts_train, predictors= clim_fenno_ex, bg = list(method='gRandom',n=1000))
names(ipts_train)
spg_crop<- vect("../SDM_tutorials/sdm_package/data/cropped_presence/cropped_presence.shp")
spg_crop<- vect("../SDM_tutorials/sdm_pkg/data/cropped_presence/cropped_presence.shp")
names(spg_crop)
?vect
# Acinonyx jubatus
sp <- gbif("Acinonyx","jubatus",download= T)
#none of these methods worked, they would only save part of it or wouldn't read it in right again
# write.table(sp, "data/gbif_acinonyx_jubatus.txt", quote=F, col.names=T, row.names=F, sep="\t")
# write.csv(sp, "data/gbif_acinonyx_jubatus.csv", quote=F, row.names=F)
# sp1<- read.csv("data/gbif_acinonyx_jubatus.csv", header=T,row.names=F, fill=T)
# sp1<- read.table("data/gbif_acinonyx_jubatus.txt", sep="\t", header=T, fill=T)
class(sp)
sp <- sp %>%
filter(basisOfRecord %in% c("HUMAN_OBSERVATION","OBSERVATION","PRESERVED_SPECIMEN"))
spg <- sp %>% select(lon,lat)
head(spg)
spg$species <- 1
spg <- spg %>% drop_na()
library(tidyr)
spg <- spg %>% drop_na()
nrow(spg)
#coordinates(spg) <- c('lon','lat')
spg_vect<- vect(spg)
names(spg_vect)
head(spg_vect)
ipts_train$species=1
ipts_train<- vect(ipts_train)
ipts_train<- ischpts2[!ipts_k==3,]
ipts_train$species=1
ipts_train<- vect(ipts_train)
d <- sdmData(species~., ipts_train, predictors= clim_fenno_ex, bg = list(method='gRandom',n=1000))
d
m <- sdm(species~., d, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m
p1 <- predict(m, clim_fenno_ex,filename='isch_predict_worldclim.img')
#p1<- rast("pr.img")
p1<- rast("isch_predict_worldclim.img")
plot(p1, col=terr_cls)
p1
names(p1)
plot(p1, col=terr_cls)
View(bg_points)
d_bg <- sdmData(species~., ipts_train, predictors= clim_fenno_ex, bg = bg_points[,c(4,3)])
d
list(method='gRandom',n=1000)
background(method='gRandom',n=1000)
?background
background(clim_fenno_ex,method='gRandom',n=1000)
background(clim_fenno_ex,method='gRandom',n=10)
#do the same for the background points
bg_extract<- terra::extract(x=clim_fenno,
y=bg_points[,c(4,3)], cells=T)
bg_nona<- bg_extract[!is.na(bg_extract[,2]),]
bgpts_nona<- bg_points[!is.na(bg_extract[,2]),]
bg_env<- cbind(bgpts_nona[,c(4,3)], bg_nona)
bg_env$Ischnura_elegans<- rep(0, nrow(bg_env))
colnames(bg_env)<- c("lon", "lat", colnames(bg_env[,-c(1:2)]))
write.table(bg_env, "data/bg_points_extract.txt", sep="\t", quote=F, row.names=F)
bg_env<- read.table("data/bg_points_extract.txt", header=T, sep="\t")
View(bg_env)
bg_env<- bg_env[,c(1:2, 6,11:14, 18,21)]
colnames(bg_env)<- c("x", "y", colnames(bg_env[,-c(1:2)]))
d_bg <- sdmData(species~., ipts_train, predictors= clim_fenno_ex, bg = bg_env)
m <- sdm(species~., d_bg, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m <- sdm(species~., d, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m
m_bg <- sdm(species~., d_bg, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m_bg
plot(d)
plot(Fenno)
points(d)
class(d)
d
d@groups$training
plot(d, ad=T)
plot(Fenno)
plot(d, add=T)
?intersect
plot(Fenno)
points(vect(bg_env[,c(1,2)]))
points(vect(bg_env[,c(1,2)], geom=c("x", "y")))
View(bg_env)
bg_env1<- bg_env
#try it with set background points
bg_env<- read.table("data/bg_points_extract.txt", header=T, sep="\t")
?rast
##create cpue landscape for background points
null_rast<- rast(ext(Fenno), resolution=res(Fenno))
?terra::res
##create cpue landscape for background points
null_rast<- rast(ext(Fenno), resolution=dimensions(Fenno))
Fenno
class(clim_fenno_ex)
res(clim_fenno_ex)
##create cpue landscape for background points
null_rast<- rast(ext(Fenno), resolution=res(clim_fenno_ex))
crs(null_rast) <- crs(Fenno)
values(clim_fenno[bg_env[2,23]])
values(clim_fenno)[bg_env[2,23]]
values(null_rast)[bg_env[2,23]]
values(null_rast)<-0
for(i in 1:nrow(bg_env)){
values(null_rast)[bg_env[i,23]]=values(null_rast)[bg_env[i,23]] +1
}
i
?table
table(bg_env[,23])
pres_freq<- table(bg_env[,23])
ncells(null_rast)
ncell(null_rast)
##create cpue landscape for background points
null_rast<- rast(ext(clim_fenno_ex), resolution=res(clim_fenno_ex))
crs(null_rast) <- crs(Fenno)
ncell(null_rast)
pres_freq[1]
pres_freq[[1]]
head(names(pres_freq))
pres_freq<- as.data.frame(table(bg_env[,23]))
View(pres_freq)
null_rast[1]
null_rast<-0
null_rast[1]
for(i in 1:nrow(pres_freq)){
null_rast[pres_freq[i,1]]=pres_freq[i,2]
}
plot(null_rast)
class(null_rast)
##create cpue landscape for background points
null_rast<- rast(ext(clim_fenno_ex), resolution=res(clim_fenno_ex))
crs(null_rast) <- crs(Fenno)
class(null_rast)
null_rast<-0
##create cpue landscape for background points
null_rast<- rast(ext(clim_fenno_ex), resolution=res(clim_fenno_ex))
crs(null_rast) <- crs(Fenno)
values(null_rast)<-0
null_rast[1]
null_rast[1]<- 2
null_rast[1]
values(null_rast)<-0
for(i in 1:nrow(pres_freq)){
null_rast[pres_freq[i,1]]=pres_freq[i,2]
}
i
pres_freq[i,2]
pres_freq[i,1]
class(pres_freq[i,1])
as.numeric(pres_freq[,1])
pres_freq<- as.data.frame(table(bg_env[,23]))
pres_freq[,1]<- as.numeric(pres_freq[,1])
pres_freq<- as.data.frame(table(bg_env[,23]))
as.numeric(pres_freq[1,1])
pres_freq[,1] <- as.numeric(as.character(pres_freq[,1]))
for(i in 1:nrow(pres_freq)){
null_rast[pres_freq[i,1]]=pres_freq[i,2]
}
plot(null_rast)
null_rast[pres_freq[1,1]]<- pres_freq[1,2]
null_rast[1,1]
pres_freq[1,1]
null_rast[2235399]
values(null_rast)<-0
for(i in 1:nrow(pres_freq)){
null_rast[pres_freq[i,1]]<- pres_freq[i,2]
}
gc()
null_rast[2235399]
plot(null_rast)
null_rast
plot(null_rast)
head(values(null_rast))
range(values(null_rast))
hist(values(null_rast))
nrow(pres_freq)
values(null_rast)[2235399]
table(values(null_rast))
plot(null_rast, col=terr_cls)
#maybe i can weight the background points by creating a CPUE landscape
#from the species specific data
d_wbg <- sdmData(species~., ipts_train, predictors= clim_fenno_ex,
bg = list(method='gRandom',n=1000,bias=null_rast))
d
m_wbg <- sdm(species~., d_wbg, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m_wbg
m_bg
?aggregate
null_coarse<- aggregate(null_rast, fact=10, fun="sum")
plot(null_coarse, col=terr_cls)
d_wcbg <- sdmData(species~., ipts_train, predictors= clim_fenno_ex,
bg = list(method='gRandom',n=1000,bias=null_coarse))
m_wcbg <- sdm(species~., d_wcbg, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m_wcbg
m_wbg
null_coarse100<- aggregate(null_rast, fact=100, fun="sum")
plot(null_coarse100, col=terr_cls)
null_coarse50<- aggregate(null_rast, fact=50, fun="sum")
plot(null_coarse50, col=terr_cls)
d_wcbg <- sdmData(species~., ipts_train, predictors= clim_fenno_ex,
bg = list(method='gRandom',n=1000,bias=null_coarse50))
m_wcbg <- sdm(species~., d_wcbg, methods=c('glm','brt','rf','fda'), replication=c('sub','boot'),
test.p=30,n=3, parallelSetting=list(ncore=4,method='parallel'))
m_wcbg
?background
writeRaster(null_coarse, "data/cpue_background_coarse10.tif")
writeRaster(null_coarse50, "data/cpue_background_coarse50.tif")
plot(d_wcbg)
