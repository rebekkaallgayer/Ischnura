plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
# print(paste("fec is ", fec, sep=""))
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(600,15, legend=(b))
legend(600,15, legend=("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
legend(600,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"))
legend(600,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols)
legend(600,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols, fill=cols)
legend(600,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(500,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5)
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
# print(paste("fec is ", fec, sep=""))
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/450", "1/400", "1/350", "1/300", "1/250",
"1/200", "1/150", "1/100", "1/50","1"), col=cols,
fill=cols, ncol=5, cex=0.8)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=5, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(200,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
legend(400,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
b<- 1/c(seq(500,1,-100),1)
cols<- c("red", "blue", "black", "green", "purple", "orange")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100", "1"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec*exp(-1*b[i]*Nt[j])
b<- 1/seq(500,1,-100)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=0.94
Nt<- seq(0,10000,100)
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=1
Nt<- seq(0,10000,100)
b<- 1/1000
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(600,100000,100)
b<- 1/500
plot(0, xlim=c(0,1000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(600,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,100000,100)
b<- 1/500
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/100
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/10000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/15000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/20000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/50000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/1000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/70000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,1000000,1000)
b<- 1/5000
plot(0, xlim=c(0,100000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,1000000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/7000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
Nt<- seq(0,10000,1000)
b<- 1/5000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/2000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
b<- 1/6000
plot(0, xlim=c(0,10000), ylim=c(0, 2), type="l", xlab="Nt", ylab="fecundity")
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b*Nt[j])
points(Nt[j], fec, pch=20)
}
max_fec=10
Nt<- seq(0,1000,10)
b<- 1/seq(500,1,-100)
cols<- c("red", "blue", "black", "green", "purple")
plot(0, xlim=c(0,1000), ylim=c(0, 15), type="l", xlab="Nt", ylab="fecundity")
for(i in 1:length(b)){
for(j in 1:length(Nt)){
fec<- max_fec*exp(-1*b[i]*Nt[j])
points(Nt[j], fec, col=cols[i], pch=20)
}
}
legend(500,15, legend=c("1/500", "1/400", "1/300",
"1/200", "1/100"), col=cols,
fill=cols, ncol=3, cex=0.8)
300^2
rnorm(20, 0.075, 0.0075)
n_layers=9 #how many layer files do you have?
min_depth=0 #surface=0, otherwise which minimum depth to plot from
dint=10 #depth interval in metres
res=1500 #resolution in metres
min_x=428430 #this is the minimum x coordinate IN METRES!
min_y=6123500 #this is the minimum y coordinate IN METRES!
nr=245 #number of rows
nc=198 #number of columns
max_y=min_y+(res*nr)
max_x=min_x+(res*nc)
min_x
max_x
min_y
max_y
install.packages("data.table")
library(data.table)
library(raster)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(lattice)
library(RColorBrewer)
library(PresenceAbsence)
install.packages("PresenceAbsence")
library(PresenceAbsence)
(2570.697/100)- 273.15
(2570.697/100)
library(data.table)
library(geodata)
library(terra)
library(sdm)
library(dismo)
library(maps)
library(CoordinateCleaner)
library(rgbif)
library(corrplot)
library(mecofun)
library(usdm)
library(mgcv)
library(predicts)
library(sp)
setwd("C:/Users/Rey/Documents/Ischnura/Ischnura_SDM/")
#read in env data
terr_cls<- terrain.colors(100, rev=T)
env_ext<- read.table("data/final_fenno/dynamic_dataset.txt", header=T)
#data has already been split into the 70:30 train:test
isch_train<- read.table("data/final_fenno/dynamic_train.txt", header=T)
isch_test<- read.table("data/final_fenno/dynamic_test.txt", header=T)
#this is all the presence points from the entire dataset, 2000-2018
ipts_train<- vect(isch_train, crs=crs(fenno_coast))
ipts_train$species=1
#distance to coast per cell
fenno_coast<- rast( "data/distance_to_coast_ll.tif")
names(fenno_coast)<- "distance_to_coast"
#this is all the presence points from the entire dataset, 2000-2018
ipts_train<- vect(isch_train, crs=crs(fenno_coast))
View(isch_train)
?vect
#this is all the presence points from the entire dataset, 2000-2018
ipts_train<- vect(isch_train, geom=c("x", "y"), crs=crs(fenno_coast))
ipts_train$species=1
#~. means it takes species column and considers the rest as predictors, don't need to individually specify
train_df<- isch_train[,-c(2,3,12)]
d<- sdmData(occ~., train=train_df)
?write.sdm
write.sdm(d, filename='data/final_fenno/dynamic_fenno_d')
m<-  read.sdm('data/final_fenno/dynamic_fenno_sdm.sdm')
#this is the raster stack of the mean of 2000-2013!
mean_layers<- rast("data/final_fenno/static/fenno_layers.tif")
p1 <- predict(m, mean_layers,filename='data/final_fenno/dynamic_predict_mean.img', overwrite=T)
plot(p1, col=terr_cls)
#but if you have already run the predict() as above, you can use the outputs
en1 <- ensemble(m, p1, filename='data/final_fenno/ensemble_dynamic.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
names(en1)<- "ensemble_weighted"
plot(en1, col=terr_cls)
#this is the data from 2013 only
layers_2013<- rast("data/final_fenno/2013_layers.tif")
p13 <- predict(m, layers_2013,filename='data/final_fenno/dynamic_predict_2013.img', overwrite=T)
en13 <- ensemble(m, p1, filename='data/final_fenno/ensemble_dynamic_2013.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
en13 <- ensemble(m, p13, filename='data/final_fenno/ensemble_dynamic_2013.img',setting=list(method='weighted',stat='tss',opt=2), overwrite = T)
names(en13)<- "ensemble_weighted"
plot(en13, col=terr_cls)
View(isch_test)
isch_2013<- isch_dat[(isch_dat$year==2013)&(!is.na(isch_dat$year)),]
isch_dat <- read.table('data/Ischnura_elegans_2022_10_26.csv', header=T, sep=',')
isch_2013<- isch_dat[(isch_dat$year==2013)&(!is.na(isch_dat$year)),]
View(isch_2013)
View(isch_2013)
yr_vect<- vect(isch_2013[,c(5,4)], geom=c("longitude", "latitude"), crs=crs(fenno_coast))
vect_2013<- vect(isch_2013[,c(5,4)], geom=c("longitude", "latitude"), crs=crs(fenno_coast))
points(vect_2013, cex=.5)
points(vect_2013, cex=.1)
plot(en13, col=terr_cls)
points(vect_2013, cex=.1)
plot(en13, col=terr_cls)
points(vect_2013, cex=.4)
plot(en1, col=terr_cls)
points(vect_2013, cex=.4)
y=1
yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
years<- seq(2000,2018,1)
yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
plot(yr_env)
SWE<- readRDS("data/gadm/gadm41_SWE_0_pk.rds")
yr_swe<- crop(yr_env, SWE)
plot(yr_swe)
##SWEDEN####
###need to create layers for just sweden to correspond to large layers
swe_blank<- rast("data/final_sweden/sweden_blank.tif")
plot(swe_blank)
swe_msk<- mask(yr_swe, swe_blank)
swe_water<- rast("data/perc_cover_freshwater.tif")
plot(swe_water)
swe_filled<- swe_water+swe_blank
plot(swe_filled)
swe_water<- rast("data/final_sweden/sweden_perc_water_WGS84.tif")
plot(swe_water)
swe_blank<- crop(fenno_coast, SWE)
swe_blank[!is.na(swe_blank)]<- 0
swe_blank <- resample(swe_blank, fenno_coast)
writeRaster(swe_blank, "data/final_sweden/sweden_WGS84_blank.tif")
plot(swe_blank)
plot(SWE, add=T)
swe_blank<- crop(fenno_coast, SWE)
swe_blank[!is.na(swe_blank)]<- 0
plot(swe_blank)
swe_blank <- resample(swe_blank, fenno_coast)
?mask
swe_blank<- mask(fenno_coast, SWE)
crs(fenno_coast)
crs(SWE)
crs(SWE)<- crs(fenno_coast)
swe_blank<- mask(fenno_coast, SWE)
plot(swe_blank)
swe_blank[!is.na(swe_blank)]<- 0
plot(swe_blank)
#swe_blank <- resample(swe_blank, fenno_coast)
writeRaster(swe_blank, "data/final_sweden/sweden_WGS84_blank.tif")
yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
swe_msk<- mask(yr_env, swe_blank)
swe_msk
plot(swe_msk)
?replace_layer
swe_msk<- c(swe_msk, swe_water)
swe_water<- resample(swe_water, swe_blank)
swe_water
swe_msk
plot(swe_water)
swe_water<- rast("data/final_sweden/sweden_perc_water_WGS84.tif")
swe_water<- rast("data/final_sweden/static/sweden_perc_water_WGS84.tif")
plot(swe_water)
swe_blank
swe_water<- resample(swe_water, swe_blank)
swe_water
swe_msk<- c(swe_msk, swe_water)
for(y in 1:length(years)){
print(years[y])
yr_env<- rast(paste("data/final_fenno/", years[y], "_layers.tif", sep=""))
swe_msk<- mask(yr_env, swe_blank)
swe_msk[["Perc_water"]]<- swe_water
writeRaster(swe_msk, paste("data/final_sweden/swe_", years[y], "_layers.tif", sep=""))
rm(yr_env)
gc()
}
swe_2013<- rast("data/final_sweden/swe_2013_layers.tif")
plot(swe_2013)
#take the big model
m_swe<- read.sdm('data/final_fenno/dynamic_fenno_sdm.sdm')
#use it to predict onto smaller scale...i think
p_swe <- predict(m, swe_2013,filename='data/final_sweden/2013_predict_swe.img', overwrite=T)
rm(m_swe)
#use it to predict onto smaller scale...i think
p_swe <- predict(m, swe_2013,filename='data/final_sweden/2013_predict_swe.img', overwrite=T)
#use it to predict onto smaller scale...i think
p_swe <- predict(m, swe_2013,filename='data/final_sweden/2013_predict_swe.img', overwrite=T)
